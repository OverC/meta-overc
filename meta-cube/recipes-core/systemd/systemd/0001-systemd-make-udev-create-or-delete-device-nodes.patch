From f8465850af1734851caea8b42bb0b047f17317e3 Mon Sep 17 00:00:00 2001
From: Bruce Ashfield <bruce.ashfield@gmail.com>
Date: Thu, 9 May 2019 17:01:19 -0400
Subject: [PATCH] foo

Signed-off-by: Bruce Ashfield <bruce.ashfield@gmail.com>
---
 src/udev/udev-node.c | 105 ++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 103 insertions(+), 2 deletions(-)

diff --git a/src/udev/udev-node.c b/src/udev/udev-node.c
index cfbbd7b283..4ee7922aac 100644
--- a/src/udev/udev-node.c
+++ b/src/udev/udev-node.c
@@ -27,6 +27,63 @@
 #include "strxcpyx.h"
 #include "udev-node.h"
 
+#define TMP_FILE_EXT		".udev-tmp"
+
+int util_unlink_secure(struct udev *udev, const char *filename);
+int udev_node_mknod(struct udev_device *dev, const char *file, mode_t mode, uid_t uid, gid_t gid);
+
+/* Reset permissions on the device node, before unlinking it to make sure,
+ * that permissions of possible hard links will be removed too.
+ */
+int util_unlink_secure(struct udev *udev, const char *filename)
+{
+	int err;
+       
+	chown(filename, 0, 0);
+	chmod(filename, 0000);
+	err = unlink(filename);
+	if (errno == ENOENT)
+		err = 0;
+	if (err)
+		log_error("unlink(%s) failed: %m\n", filename);
+	return err;
+}
+
+int udev_node_mknod(struct udev_device *dev, const char *file, mode_t mode, uid_t uid, gid_t gid)
+{
+	struct udev *udev = udev_device_get_udev(dev);
+	dev_t devnum = udev_device_get_devnum(dev);
+	int err = 0;
+
+	if (strcmp(udev_device_get_subsystem(dev), "block") == 0)
+		mode |= S_IFBLK;
+	else
+		mode |= S_IFCHR;
+
+	if (file == NULL)
+		file = udev_device_get_devnode(dev);
+
+	log_info("mknod '%s' %u:%u %#o\n", file, major(devnum), minor(devnum), mode);
+	do {
+		err = mkdir_parents(file, 0755);
+		if (err != 0 && err != -ENOENT)
+			break;
+		mac_selinux_create_file_prepare(file, mode);
+		err = mknod(file, mode, devnum);
+		if (err != 0)
+			err = -errno;
+		mac_selinux_create_file_clear();
+	} while (err == -ENOENT);
+	if (err != 0 && err != -EEXIST)
+		log_error("mknod '%s' %u:%u %#o' failed: %m\n", file, major(devnum), minor(devnum), mode);
+	log_debug("set permissions '%s' %#o uid=%u gid=%u\n", file, mode, uid, gid);
+	chmod(file, mode);
+	chown(file, uid, gid);
+	
+	return err;
+}
+
+
 static int node_symlink(sd_device *dev, const char *node, const char *slink) {
         _cleanup_free_ char *slink_dirname = NULL, *target = NULL;
         const char *id_filename, *slink_tmp;
@@ -296,8 +353,15 @@ static int node_permissions_apply(sd_device *dev, bool apply,
         else
                 mode |= S_IFCHR;
 
-        if (lstat(devnode, &stats) < 0)
-                return log_device_debug_errno(dev, errno, "cannot stat() node '%s' (%m)", devnode);
+        if (lstat(devnode, &stats) < 0) {
+                log_debug("creating device node '%s', devnum=%d:%d, mode=%#o, uid=%d, gid=%d\n",
+                    devnode, major(devnum), minor(devnum), mode, uid, gid);
+
+                if (udev_node_mknod(dev, NULL, mode, uid, gid) != 0) {
+                        err = log_debug_errno(errno, "cannot create node '%s' (%m)", devnode);
+                        goto out;
+                }
+	} 
 
         if (((stats.st_mode & S_IFMT) != (mode & S_IFMT)) || (stats.st_rdev != devnum))
                 return log_device_debug_errno(dev, SYNTHETIC_ERRNO(EEXIST), "Found node '%s' with non-matching devnum %s, skip handling",
@@ -427,6 +491,11 @@ int udev_node_remove(sd_device *dev) {
         _cleanup_free_ char *filename = NULL;
         const char *devlink;
         int r;
+        struct udev *udev = udev_device_get_udev(dev);
+        struct udev_device *dev_check;
+        const char *devnode;
+        struct stat stats;
+        int err = 0;
 
         assert(dev);
 
@@ -434,6 +503,38 @@ int udev_node_remove(sd_device *dev) {
         FOREACH_DEVICE_DEVLINK(dev, devlink)
                 (void) link_update(dev, devlink, false);
 
+        devnode = udev_device_get_devnode(dev);
+        if (devnode == NULL){
+            return;
+        }
+
+        if (stat(devnode, &stats) == 0) {
+            if (stats.st_rdev != udev_device_get_devnum(dev)) {
+                log_debug("device node '%s' points to a different device, skip removal\n", devnode);
+                return;
+            }
+
+            if (stats.st_mode & 01000) {
+                log_debug("device node '%s' has sticky bit set, skip removal\n", devnode);
+                return;
+            }
+        } else {
+            log_debug("device node '%s' not found\n", devnode);
+        }
+
+        dev_check = udev_device_new_from_syspath(udev, udev_device_get_syspath(dev));
+        if (dev_check != NULL) {
+            /* do not remove device node if the same sys-device is re-created in the meantime */
+            log_debug("keeping device node of existing device'%s'\n", devnode);
+            udev_device_unref(dev_check);
+            return;
+        }
+
+        log_debug("removing device node '%s'\n", devnode);
+        err = util_unlink_secure(udev, devnode);
+        if (err == 0)
+            rmdir_parents(udev_device_get_devnode(dev), "/");
+
         r = xsprintf_dev_num_path_from_sd_device(dev, &filename);
         if (r < 0)
                 return log_device_debug_errno(dev, r, "Failed to get device path: %m");
-- 
2.19.1

