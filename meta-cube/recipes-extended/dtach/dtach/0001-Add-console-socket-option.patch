From d9d2cf7b7412dd0a67c669a74c0b1cd27896d5a9 Mon Sep 17 00:00:00 2001
From: Jason Wessel <jason.wessel@windriver.com>
Date: Sun, 16 Jul 2017 20:18:50 -0700
Subject: [PATCH] Add console socket option and pty link location.

The console socket option will open listening socket which will work
with runc which passes a file descriptor to use as the pty. 

The pty link location will open an additional pty which can
be connected directly by another application.   The idea is to
provide a pty redirector for a run console.  The pty
link can be shared to a different name space by using a bind
mount.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 dtach.h  |    6 -
 main.c   |   27 ++++
 master.c |  375 +++++++++++++++++++++++++++++++++++++++++++++++++++++----------
 3 files changed, 352 insertions(+), 56 deletions(-)

--- a/dtach.h
+++ b/dtach.h
@@ -27,6 +27,8 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <sys/epoll.h>
+#include <sys/poll.h>
 
 #if TIME_WITH_SYS_TIME
 #include <sys/time.h>
@@ -81,9 +83,11 @@
 #define S_ISSOCK(m) (((m) & S_IFMT) == S_IFSOCK)
 #endif
 
-extern char *progname, *sockname;
+extern char *progname, *sockname, *consockname;
 extern int detach_char, no_suspend, redraw_method;
 extern int quiet_flag, do_clear, alarm_time, squash_crs, client_quit;
+extern int do_peer_pty, do_console;
+extern char *peer_pty_link_loc;
 extern struct termios orig_term;
 extern int dont_have_tty;
 extern int allow_no_term;
--- a/main.c
+++ b/main.c
@@ -31,12 +31,18 @@ const char copyright[] = "dtach - versio
 char *progname;
 /* The name of the passed in socket. */
 char *sockname;
+/* The name of the console socket. */
+char *consockname = NULL;
 /* The character used for detaching. Defaults to '^\' */
 int detach_char = '\\' - 64;
 /* 1 if we should not interpret the suspend character. */
 int no_suspend;
 /* The default redraw method. Initially set to unspecified. */
 int redraw_method = REDRAW_UNSPEC;
+/* Create a peer pty device */
+int do_peer_pty = 0;
+/* Use command as console socket instead */
+int do_console = 0;
 /* Clear screen on attach */
 int do_clear = 1;
 /* Quiet on exit */
@@ -49,6 +55,8 @@ int allow_no_term = 0;
 int squash_crs = 0;
 /* Kill server on client disconnect */
 int client_quit = 0;
+/* Link location for the peer tty socket */
+char *peer_pty_link_loc = NULL;
 
 /*
 ** The original terminal settings. Shared between the master and attach
@@ -83,9 +91,12 @@ usage()
 		"\t\t  socket.\n"
 		"Options:\n"
 		"  -C\t\tDo not clear screen on attach.\n"
+		"  -c\t\tUse a unix domain socket instead in place of command\n"
+		"    \t\t  for compatibility with runc.\n"
 		"  -e <char>\tSet the detach character to <char>, defaults "
 		"to ^\\.\n"
 		"  -E\t\tDisable the detach character.\n"
+		"  -p <location>\tCreate a peer pty socket to use instead of attach.\n"
 		"  -q\t\tQuiet on exit from client.\n"
 		"  -Q\t\tQuit server on last client detach.\n"
 		"  -r <method>\tSet the redraw method to <method>. The "
@@ -177,6 +188,8 @@ main(int argc, char **argv)
 		{
 			if (*p == 'E')
 				detach_char = -1;
+			else if (*p == 'c')
+				do_console = 1;
 			else if (*p == 'C')
 				do_clear = 0;
 			else if (*p == 'q')
@@ -191,6 +204,20 @@ main(int argc, char **argv)
 				connect_wait = 1;
 			else if (*p == 'z')
 				no_suspend = 1;
+			else if (*p == 'p')
+			{
+				++argv; --argc;
+				if (argc < 1)
+				{
+					printf("%s: Peer pty link location "
+						"specified.\n", progname);
+					printf("Try '%s --help' for more "
+						"information.\n", progname);
+					return 1;
+				}
+				do_peer_pty = 1;
+				peer_pty_link_loc = argv[0];
+			}
 			else if (*p == 'e')
 			{
 				++argv; --argc;
--- a/master.c
+++ b/master.c
@@ -53,17 +53,40 @@ struct client
 static struct client *clients;
 /* The pseudo-terminal created for the child process. */
 static struct pty the_pty;
+/* Peer direct input pty */
+static int peer_pty = -1;
+
+/* Write to stdout for debug after it is initially closed */
+static int dup_stdout = -1;
 
 #ifndef HAVE_FORKPTY
 pid_t forkpty(int *amaster, char *name, struct termios *termp,
 	struct winsize *winp);
 #endif
 
+/* Handle EINTR write */
+static void
+eintr_write(int fd, const void *buf, ssize_t len)
+{
+	ssize_t n;
+
+again:
+	n = write(fd, buf, len);
+
+
+	if (n < 0 && errno == EINTR)
+		goto again;
+}
+
 /* Unlink the socket */
 static void
 unlink_socket(void)
 {
 	unlink(sockname);
+	if (consockname)
+		unlink(consockname);
+	if (peer_pty_link_loc)
+		unlink(peer_pty_link_loc);
 }
 
 /* Signal */
@@ -249,14 +272,41 @@ pty_activity(int s)
 	struct client *p;
 	fd_set readfds, writefds;
 	int highest_fd, nclients;
+	ssize_t written;
 
 	/* Read the pty activity */
 	len = read(the_pty.fd, buf, sizeof(buf));
 
+	if (do_peer_pty)
+	{
+		struct pollfd pfd = { .fd = peer_pty, .events = POLLHUP };
+
+		poll(&pfd, 1, 0);
+		if (!(pfd.revents & POLLHUP))
+		{
+			written = 0;
+			while (written < len)
+			{
+				ssize_t n = write(peer_pty, buf + written, len - written);
+
+				if (n > 0)
+				{
+					written += n;
+					continue;
+				}
+				else if (n < 0 && errno == EINTR)
+					continue;
+				break;
+			}
+		}
+	}
+
 	/* Error -> die */
 	if (len <= 0)
 		exit(1);
 
+	if (do_console)
+		goto top;
 #ifdef BROKEN_MASTER
 	/* Get the current terminal settings. */
 	if (tcgetattr(the_pty.slave, &the_pty.term) < 0)
@@ -293,8 +343,6 @@ top:
 	/* Send the data out to the clients. */
 	for (p = clients, nclients = 0; p; p = p->next)
 	{
-		ssize_t written;
-
 		if (!FD_ISSET(p->fd, &writefds))
 			continue;
 
@@ -323,9 +371,31 @@ top:
 		goto top;
 }
 
+static void
+epoll_rds(int efd, int fd)
+{
+	struct epoll_event event;
+	if (fd >= 0) {
+		event.data.fd = fd;
+		event.events = EPOLLIN;
+		if (epoll_ctl(efd, EPOLL_CTL_ADD, fd, &event) < 0 && errno != EEXIST)
+		{
+			if (dup_stdout > 0)
+			{
+				dprintf(dup_stdout, "Failed to epoll add: %s\n", strerror(errno));
+			}
+			else
+			{
+				perror("Failed to epoll");
+			}
+			exit(1);
+		}
+	}
+}
+
 /* Process activity on the control socket */
 static void
-control_activity(int s)
+control_activity(int efd, int s)
 {
 	int fd;
 	struct client *p;
@@ -339,7 +409,11 @@ control_activity(int s)
 		close(fd);
 		return;
 	}
-	if (alarm_time) {
+	/*
+	 * Skip the alarm timer reset if this is not the console socket
+	 * mode.  The console socket handler will take care of it.
+	 */
+	if (!do_console && alarm_time) {
 		alarm(0);
 		alarm_time = 0;
 	}
@@ -353,6 +427,7 @@ control_activity(int s)
 	if (p->next)
 		p->next->pprev = &p->next;
 	*(p->pprev) = p;
+	epoll_rds(efd, fd);
 }
 
 /* Process activity from a client. */
@@ -388,10 +463,10 @@ client_activity(struct client *p)
 		if (pkt.len == 0)
 		{
 			pkt.u.buf[0] = 0x4;
-			write(the_pty.fd, pkt.u.buf, 1);
+			eintr_write(the_pty.fd, pkt.u.buf, 1);
 		}
 		if (pkt.len <= sizeof(pkt.u.buf))
-			write(the_pty.fd, pkt.u.buf, pkt.len);
+			eintr_write(the_pty.fd, pkt.u.buf, pkt.len);
 	}
 
 	/* Attach or detach from the program. */
@@ -400,6 +475,9 @@ client_activity(struct client *p)
 	else if (pkt.type == MSG_DETACH)
 		p->attached = 0;
 
+	/* Do not accept any other messages for the console socket */
+	if (do_console)
+		return;
 	/* Window size change request, without a forced redraw. */
 	else if (pkt.type == MSG_WINCH)
 	{
@@ -432,7 +510,7 @@ client_activity(struct client *p)
                 	if (((the_pty.term.c_lflag & (ECHO|ICANON)) == 0) &&
                         	(the_pty.term.c_cc[VMIN] == 1))
 			{
-				write(the_pty.fd, &c, 1);
+				eintr_write(the_pty.fd, &c, 1);
 			}
 		}
 		/* Send a WINCH signal to the program. */
@@ -443,8 +521,6 @@ client_activity(struct client *p)
 	}
 }
 
-static int dup_stdout = -1;
-
 /* Alarm handler for timeout waiting on client connect */
 static void
 	alarm_handler(int sig)
@@ -454,15 +530,71 @@ static void
 	exit(sig);
 }
 
+/* Connect a console socket via passed fd */
+static int
+connect_con(int s)
+{
+	int ac_fd;
+	struct msghdr msg = {0};
+
+	char m_buffer[1];
+	struct iovec io = { .iov_base = m_buffer, .iov_len = sizeof(m_buffer) };
+	msg.msg_iov = &io;
+	msg.msg_iovlen = 1;
+
+	char c_buffer[256];
+	msg.msg_control = c_buffer;
+	msg.msg_controllen = sizeof(c_buffer);
+	int fd;
+	struct cmsghdr *cmsg;
+
+	ac_fd = accept(s, NULL, NULL);
+	if (ac_fd < 0)
+		return 0;
+
+	if (recvmsg(ac_fd, &msg, MSG_WAITALL) < 0)
+	{
+		if (dup_stdout >= 0)
+			dprintf(dup_stdout, "Failed to receive message: %s\n", strerror(errno));
+		exit(1);
+	}
+
+	cmsg = CMSG_FIRSTHDR(&msg);
+	memmove(&fd, CMSG_DATA(cmsg), sizeof(fd));
+	close(ac_fd);
+
+	if (setnonblocking(fd) < 0) {
+		close(fd);
+		return 0;
+	}
+
+	if (alarm_time) {
+		alarm(0);
+		alarm_time = 0;
+	}
+
+	the_pty.fd = fd;
+	if (do_peer_pty && !tcgetattr(the_pty.fd, &the_pty.term))
+		tcsetattr(peer_pty, TCSADRAIN, &the_pty.term);
+
+	return 1;
+}
+
+#define MAXEVENTS 64
+
 /* The master process - It watches over the pty process and the attached */
 /* clients. */
 static void
-master_process(int s, char **argv, int waitattach, int statusfd)
+master_process(int s, int consock, char **argv, int waitattach, int statusfd)
 {
 	struct client *p, *next;
-	fd_set readfds;
-	int highest_fd;
 	int nullfd;
+	int efd, i, n;
+	struct epoll_event *events;
+	int is_edge_mode;
+	struct epoll_event edge_peer;
+	struct epoll_event data_peer;
+	char *peer_buf[32];
 
 	int has_attached_client = 0;
 
@@ -475,6 +607,11 @@ master_process(int s, char **argv, int w
 
 	/* Create a pty in which the process is running. */
 	signal(SIGCHLD, die);
+
+	if (do_console) {
+		the_pty.fd = -1;
+		goto no_init_pty;
+	}
 	if (init_pty(argv, statusfd) < 0)
 	{
 		if (statusfd != -1)
@@ -485,6 +622,7 @@ master_process(int s, char **argv, int w
 			printf("%s: init_pty: %s\n", progname, strerror(errno));
 		exit(1);
 	}
+no_init_pty:
 
 	/* Set up some signals. */
 	signal(SIGPIPE, SIG_IGN);
@@ -508,6 +646,34 @@ master_process(int s, char **argv, int w
 		alarm(alarm_time);
 	}
 
+	efd = epoll_create1(EPOLL_CLOEXEC);
+	if (efd < 0)
+	{
+		perror("epoll_create failed");
+		exit(1);
+	}
+
+	epoll_rds(efd, s);
+	epoll_rds(efd, consock);
+
+	if (do_peer_pty)
+	{
+		/* peer_pty is a special case to handle th EPOLLHUP */
+		edge_peer.data.fd = peer_pty;
+		edge_peer.events = EPOLLIN|EPOLLHUP|EPOLLRDHUP|EPOLLET;
+		data_peer.data.fd = peer_pty;
+		data_peer.events = EPOLLIN|EPOLLHUP|EPOLLRDHUP;
+		is_edge_mode = 1;
+		if (epoll_ctl(efd, EPOLL_CTL_ADD, peer_pty, &edge_peer) < 0 && errno != EEXIST)
+		{
+			printf("Failed to epoll add: %s\n", strerror(errno));
+			exit(1);
+		}
+	}
+
+	if (!waitattach)
+		epoll_rds(efd, the_pty.fd);
+
 	/* Make sure stdin/stdout/stderr point to /dev/null. We are now a
 	** daemon. */
 	nullfd = open("/dev/null", O_RDWR);
@@ -517,38 +683,15 @@ master_process(int s, char **argv, int w
 	if (nullfd > 2)
 		close(nullfd);
 
+	events = calloc (MAXEVENTS, sizeof(struct epoll_event));
+
 	/* Loop forever. */
 	while (1)
 	{
 		int new_has_attached_client = 0;
 
-		/* Re-initialize the file descriptor set for select. */
-		FD_ZERO(&readfds);
-		FD_SET(s, &readfds);
-		highest_fd = s;
-
-		/*
-		** When waitattach is set, wait until the client attaches
-		** before trying to read from the pty.
-		*/
-		if (waitattach)
-		{
-			if (clients && clients->attached)
-				waitattach = 0;
-		}
-		else
-		{
-			FD_SET(the_pty.fd, &readfds);
-			if (the_pty.fd > highest_fd)
-				highest_fd = the_pty.fd;
-		}
-
 		for (p = clients; p; p = p->next)
 		{
-			FD_SET(p->fd, &readfds);
-			if (p->fd > highest_fd)
-				highest_fd = p->fd;
-
 			if (p->attached)
 				new_has_attached_client = 1;
 		}
@@ -561,26 +704,109 @@ master_process(int s, char **argv, int w
 		}
 
 		/* Wait for something to happen. */
-		if (select(highest_fd + 1, &readfds, NULL, NULL, NULL) < 0)
+		n = epoll_wait(efd, events, MAXEVENTS, -1);
+		if (n < 0)
 		{
 			if (errno == EINTR || errno == EAGAIN)
 				continue;
 			exit(1);
 		}
+		for (i = 0; i < n; i++)
+		{
+			if ((events[i].events & EPOLLERR) ||
+				(events[i].events & EPOLLHUP) ||
+				(!(events[i].events & EPOLLIN)))
+			{
+				/* Handle client connect/disconnect */
+				if (events[i].events & EPOLLHUP && events[i].data.fd == peer_pty)
+				{
+					if (!is_edge_mode)
+					{
+						epoll_ctl(efd, EPOLL_CTL_MOD, peer_pty, &edge_peer);
+						is_edge_mode = 1;
+					}
+				}
+				else
+				{
+					int found_client = 0;
+					/* If a client closes it needs to be cleaned up */
+					for (p = clients; p; p = next)
+					{
+						next = p->next;
+						if (events[i].data.fd == p->fd)
+						{
+							found_client = 1;
+							client_activity(p);
+							break;
+						}
+					}
+					if (!found_client)
+						close(events[i].data.fd);
+					if (events[i].data.fd == the_pty.fd)
+						exit(1);
+					continue;
+				}
+			}
+			if (events[i].data.fd == s)
+			{
+				control_activity(efd, s);
+			}
+			else if (events[i].data.fd == the_pty.fd)
+			{
+				pty_activity(s);
+			}
+			else if (events[i].data.fd == consock)
+			{
+				if (connect_con(consock))
+				{
+					/* close out the consock if success */
+					close(consock);
+					consock = -1;
+					epoll_rds(efd, the_pty.fd);
+				}
+			}
+			else if (events[i].data.fd == peer_pty)
+			{
+				int len;
 
-		/* New client? */
-		if (FD_ISSET(s, &readfds))
-			control_activity(s);
-		/* Activity on a client? */
-		for (p = clients; p; p = next)
-		{
-			next = p->next;
-			if (FD_ISSET(p->fd, &readfds))
-				client_activity(p);
-		}
-		/* pty activity? */
-		if (FD_ISSET(the_pty.fd, &readfds))
-			pty_activity(s);
+				len = read(peer_pty, peer_buf, sizeof(peer_buf));
+				if (the_pty.fd >= 0 && len > 0)
+				{
+					if (is_edge_mode)
+					{
+						epoll_ctl(efd, EPOLL_CTL_MOD, peer_pty, &data_peer);
+						is_edge_mode = 0;
+					}
+					eintr_write(the_pty.fd, peer_buf, len);
+				}
+			}
+			else
+			{
+				/* The clients */
+				for (p = clients; p; p = next)
+				{
+					next = p->next;
+					if (events[i].data.fd == p->fd)
+					{
+						client_activity(p);
+						break;
+					}
+				}
+			}
+		}
+
+		/*
+		** When waitattach is set, wait until the client attaches
+		** before trying to read from the pty.
+		*/
+		if (waitattach)
+		{
+			if (clients && clients->attached)
+			{
+				waitattach = 0;
+				epoll_rds(efd, the_pty.fd);
+			}
+		}
 	}
 }
 
@@ -589,12 +815,46 @@ master_main(char **argv, int waitattach,
 {
 	int fd[2] = {-1, -1};
 	int s;
+	int consock = -1;
 	pid_t pid;
 
 	/* Use a default redraw method if one hasn't been specified yet. */
 	if (redraw_method == REDRAW_UNSPEC)
 		redraw_method = REDRAW_CTRL_L;
 
+	/* Init the console socket */
+	if (do_console)
+	{
+		consockname = argv[0];
+		consock = create_socket(consockname);
+		if (consock < 0) {
+			printf("ERROR: Could not create socket: %s\n", consockname);
+			return 1;
+		}
+	}
+
+	/* Init the peer pty */
+	if (do_peer_pty)
+	{
+		char pty_loc[128];
+		int peer_slave;
+
+		if(openpty(&peer_pty, &peer_slave, pty_loc, NULL, NULL) < 0)
+		{
+			printf("%s: Could not open master/slave pty\n", progname);
+			exit(1);
+		}
+		close(peer_slave);
+		if (peer_pty_link_loc)
+		{
+			unlink(peer_pty_link_loc);
+			if (symlink(pty_loc, peer_pty_link_loc) < 0)
+			{
+				printf("%s: Could not open link: %s\n", progname, peer_pty_link_loc);
+			}
+		}
+	}
+
 	/* Create the unix domain socket. */
 	s = create_socket(sockname);
 	if (s < 0 && errno == ENAMETOOLONG)
@@ -612,7 +872,12 @@ master_main(char **argv, int waitattach,
 				if (chdir(sockname) >= 0)
 				{
 					s = create_socket(slash + 1);
-					fchdir(dirfd);
+					if (fchdir(dirfd) < 0)
+					{
+						printf("%s: %s: %s\n", progname,
+						       sockname, strerror(errno));
+						return 1;
+					}
 				}
 				*slash = '/';
 				close(dirfd);
@@ -653,7 +918,7 @@ master_main(char **argv, int waitattach,
 
 	if (dontfork)
 	{
-		master_process(s, argv, waitattach, fd[1]);
+		master_process(s, consock,  argv, waitattach, fd[1]);
 		return 0;
 	}
 
@@ -670,7 +935,7 @@ master_main(char **argv, int waitattach,
 		/* Child - this becomes the master */
 		if (fd[0] != -1)
 			close(fd[0]);
-		master_process(s, argv, waitattach, fd[1]);
+		master_process(s, consock, argv, waitattach, fd[1]);
 		return 0;
 	}
 	/* Parent - just return. */
@@ -686,7 +951,7 @@ master_main(char **argv, int waitattach,
 		len = read(fd[0], buf, sizeof(buf));
 		if (len > 0)
 		{
-			write(2, buf, len);
+			eintr_write(2, buf, len);
 			kill(pid, SIGTERM);
 			return 1;
 		}
