#!/bin/bash
cmd_server_pid=$$

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

## Set up trap handler
## On exit, we kill our entire process group (dtach, tail .. etc)
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM EXIT

# returns 1 if we are container, 0 otherwise
function am_i_a_container()
{
    local virt=`systemd-detect-virt`
    if [ "${virt}" = "lxc" ]; then
	return 1
    fi

    return 0
}

function output_and_log_msg()
{
    local msg=$1
    local output_file=$2

    redir="> /dev/null"
    if [ -n "${verbose}" ]; then
        redir=""
    fi

    if [ -n "${output_file}" ]; then
	outfile="|tee ${output_file}"
    fi

    # depending on the launch, this goes to stdout and/or the output file
    cmd="echo \"${msg}\" $outfile $redir"
    eval $cmd

    # and this goes to the logfile if configured. We add a timestamp for better tracking as well
    if [ -n "${logfile}" ]; then
	date | tr -d '\n' >> ${logfile}
	echo -n ": " >> ${logfile}
	echo ${msg} >> ${logfile}
    fi
}

##############  Mainline begins here ################################

while [ $# -gt 0 ]; do
    case "$1" in
	-v) verbose=t
            ;;
	-l|--logfile)
	    logfile=$2
	    shift
	    ;;
        *) break
            ;;
    esac
    shift
done

CONF_FILE=/etc/cube-cmd-server.conf

. /etc/cube-cmd-server-functions

# create arrays of the values found in the yamle config file
eval $(parse_yaml_conf_file $CONF_FILE)
if [ -n "${verbose}" ]; then
    # if verbose, this will just dump the variables and their values to stdout
    parse_yaml_conf_file $CONF_FILE
fi

if [ -z "${whoami}" ]; then
    whoami=`cube_whoami`
fi

# test .. are we a container ?
am_i_a_container
if [ $? -eq 1 ]; then
    # construct the container name, and see what it is configured to monitor
    eval monitor="$\{${whoami}_monitor[@]\}"
    monitor_container=`eval echo ${monitor}`
else
    monitor_container="${host_monitor[@]}"
fi

if [ -z "${monitor_container}" ];then
    output_and_log_msg "[ERROR]: nothing to monitor, exiting .."
    exit 1
fi

if [ "${monitor_container}" = "'*'" ]; then
    # only lxc is currently supported
    myname=`cat /etc/hostname`
    matches=""
    for c in `ls -f /var/lib/lxc/*/rootfs/etc/hostname`; do
	# remove ourself from the list .. we can do that by checking
	# the hostnames
	grep -q -E "^${myname}$" $c
	if [ $? -ne 0 ]; then
	    cname=${c#/var/lib/lxc/}
	    cname=${cname%%/*}
	    matches="$matches $cname"
	fi
    done

    for cname in $matches; do
	input_stream="$input_stream $cname"
    done
else
    input_stream="${monitor_container}"
fi

output_and_log_msg "[INFO]: setup completed, waiting on commands from ${input_stream}"
systemd-notify --ready --pid=$cmd_server_pid

[ -n "${verbose}" ] && debug="-v "

topdir=`dirname "$BASH_SOURCE"`

for s in ${input_stream}; do
    output_and_log_msg "[INFO]: Creating the cmd-channel for $s ..."
    (nanoserver -q $debug -L "ipc:///opt/container/$s/cmd-pipe" -E "$topdir/cube-cmd-handler -l $logfile -r $s") &
done

output_and_log_msg "[INFO]: Wating for the cube-cmd-server exited ..."
wait

output_and_log_msg "[INFO]: cube-cmd-server exiting (cleanly)"
