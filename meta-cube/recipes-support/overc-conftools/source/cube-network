#/bin/bash

# we ge an action + cube name
action=$1
shift
cubedir=$1

cd $cubedir

cubename=$(basename $cubedir)

count=0
pid=$2

veth_name=$(eval echo veth-${cubename})

if [ "${action}" = "up" ]; then
    echo "${pid}" > .cube.pid
    echo "${veth_name}" > .cube.veth
    cname=$(basename `pwd`)

    network=dynamic
    if [ -f cube.network.type ]; then
	network=$(cat cube.network.type)
    fi

    # This creates a veth pair.
    #
    #    veth<container namespace> -> veth-br-int
    #
    # veth<container namespace> remains in essential, and we use the container
    # namespace so we can always locate the container ns later, and so that it
    # is unique within essential.
    #
    # veth-br-int is inserted into the container, and will be consistent across
    # containers.
    #
    # This is done by pflask, so we can skip it for now
    # ip link add dev ${veth_name} type veth peer name veth-br-int
    
    # Add the veth that stays in essential to the ovs-bridge. This gets us
    # connectivity to the network prime, and hence the outside world
    count=0
    while [ $count -lt 10 ]; do
	ovs-vsctl add-port br-int ${veth_name}
	if [ $? -ne 0 ]; then
	    let count=$count+1
	    sleep 0.5
	else
	    count=10
	fi
    done

    # Bring up the interface we just added to the bridge. It must be up so dhcp
    # can get an ip address.
    ip link set dev ${veth_name} up

    # push the container veth endpoint into the container network namespace
    # NOTE: also done by pflask
    # ip link set veth-br-int netns ${pid}

    # TODO: we should have a third networking mode "self", which means that
    #       we'd make the veth available and let the container itself set up
    #       the networking (presumably via dhcp). This currently has issues
    #       with systemd lacking permissions and capabilities.
    #
    # Configure the container networking:
    #   1) loopback interface
    #   2) dhcp address for the veth-br-int
    #   3) default route configuration
    #
    nsenter -t ${pid} -n --preserve-credentials ip link set dev lo up
    nsenter -t ${pid} -n --preserve-credentials ip link set dev ${veth_name} up
    if [ "${network}" == "dynamic" ]; then
	command="dhclient -sf /usr/sbin/dhclient-script.container -e CONTAINER=${cname} --no-pid veth-br-int >> /dev/null 2>&1"
	eval nsenter -t ${pid} -n -- ${command}
	if [ -e "/etc/resolv.conf.${cname}" ]; then
	    mv /etc/resolv.conf.${cname} /opt/container/${cname}/rootfs/etc/resolv.conf
	fi
	#nsenter -t ${pid} -n --preserve-credentials dhclient ${veth_name}
	primary_ip=$(nsenter -t ${pid} -n ip -o -4 addr list ${veth_name} | awk '{print $4}' | cut -d/ -f1)
    else
	# the ip must be in the format of address/mask, i.e.: 192.168.42.101/24
	ip=$(cat cube.network.ip)
	if [ -z "${ip}" ]; then
	    echo "ERROR: static networking selected and no IP provided"
	    exit 1
	fi
	
	# the first entry is the primary, any others are aliases
	count=0
	for i in ${ip}; do
	    if [ ${count} -eq 0 ]; then
		nsenter -t ${pid} -n --preserve-credentials ip addr add $i dev ${veth_name}
		primary_ip=$(echo $i | cut -d/ -f1)
	    else
		nsenter -t ${pid} -n --preserve-credentials ip addr add $i dev ${veth_name}:${count}
	    fi
	    let count=${count}+1
	done
    fi

    if [ -f "cube.network.mac" ]; then
	mac_address=$(cat cube.network.mac)
    else
	# cube's use the internal mac range: x6-xx-xx-xx-xx-xx
	last_ip_range=$(echo $primary_ip | cut -f4 -d.)
	mac_address=$(printf "06:00:00:00:00:%02x" ${last_ip_range})
    fi
    nsenter -t ${pid} -n --preserve-credentials ip link set dev ${veth_name} up address ${mac_address}

    gateway="192.168.42.1"
    if [ -f "cube.network.gateway" ]; then
	gateway=$(cat cube.network.gateway)
    fi

    # device passthrough
    #
    # if no devices are passed through, then we need to set the default
    # route to the gateway (since no config script will ever be run)
    need_default_route=t
    if [ -f ".cube.device.network" ]; then
	# any non virtual ethernet devices ?
	netdevs=$(cat .cube.device.network)
	for n in ${netdevs}; do
	    echo ${n} | grep -q veth
	    if [ $? -ne 0 ]; then
		# clear the default route flag, whatever ups the interface will
		# take care of this.

		need_default_route=
		# we have a real device
		device=$(echo ${n} | cut -f1 -d:)

		# push the device into the namespace
		# Note: done by pflask
		# ip link set ${device} netns ${pid}

		# setup nat and forwarding. this is what systemd-networkd does as well
		nsenter -t ${pid} -n --preserve-credentials iptables -t nat -A POSTROUTING -o ${device} -j MASQUERADE
		nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'
	    fi
	done
    fi

    if [ -n "${need_default_route}" ]; then
	nsenter -t ${pid} -n --preserve-credentials ip route add default via ${gateway}
    fi

    # note: this should be conditional with the fixed dhclient call abovee
    nameserver="192.168.42.1"
    if [ -f "cube.network.nameserver" ]; then
	nameserver=$(cat cube.network.nameserver)
    fi
    nsenter -t ${pid} -m sh -c "rm -f /etc/resolv.conf"
    nsenter -t ${pid} -m sh -c "echo nameserver ${nameserver} > /etc/resolv.conf"
fi

if [ "${action}" = "down" ]; then
    ovs-vsctl del-port br-int ${veth_name}
    ip link del dev ${veth_name}

    # physical device passthrough
    if [ -n "${path}/.cube.device.network" ]; then
	# any non virtual ethernet devices ?
	netdevs=$(cat ${path}/.cube.device.network)
	for n in ${netdevs}; do
	    echo ${n} | grep -q veth
	    if [ $? -ne 0 ]; then
		# we have a real device
		device=$(echo ${n} | cut -f1 -d:)
		# TODO: return the device to the root ns. this is not working
		ip link set ${device} netns 1
	    fi
	done
    fi
fi
