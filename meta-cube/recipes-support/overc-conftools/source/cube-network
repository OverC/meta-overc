#/bin/bash

# we ge an action + cube name
action=$1
shift

# if we have json, there will be { in the next input, otherwise, it
# is a directory
echo "$@" | grep -q {
if [ $? -eq 0 ]; then
    # json
    cubedir=$(pwd)
    cubename=$(basename $cubedir)

    # yank what we need out of the json
    pid=$(echo "$@" | jq .pid)
else
    cubedir=$1
    cubename=$(basename $cubedir)
    pid=$2
fi

cd $cubedir

if [ -z "${pid}" ]; then
    if [ -f .cube.pid ]; then
	pid=$(cat .cube.pid)
    fi
fi

# build an interface hash
declare -A IFACEMAP
OLDIFS="$IFS"
IFS=$'\n'
for p in $(cat /proc/net/dev); do
    if=$(echo $p | sed -n 's/^\(.*\):.*$/#\1#/p' | sed 's/ //g')
    if [ -n "${if}" ]; then
	IFACEMAP[$if]=t
    fi
done
IFS=$OLDIFS

# returns 1 on match, 0 otherwise
interface_exists() {
    tgt="$1"
    if [[ ${IFACEMAP[#$tgt#]} ]]; then
	return 1
    fi

    return 0
}

if [ "${action}" = "down" ]; then
    if [ -f .cube.veth ]; then
	veth_name=$(cat .cube.veth)
    fi
fi

if [ -z "${veth_name}" ]; then
    # if the veth is already present, then we have to roll with whatever the
    # name is!
    veth_name=$(eval echo veth-${cubename})

    interface_exists ${veth_name}
    if [ $? -eq 1 ]; then
	pflask=t
	veth_pflask="${veth_name}"
    fi

    # The veth name can only be 15 characters, so we limit ourselves to 13 from the
    # container name. That leaves us two characters to cycle for a unique name
    cname=$(echo ${cubename} | cut -c1-13)
    interface_exists ${cname}
    if [ $? -eq 0 ]; then
	# not present, so we are good to go
	veth_name=${cname}
    else
	# the interface was found, we need to try and be unique
	count=0
	done=
	while [ -z "${done}" ]; do
	    cname_test="${cname}${count}"
	    interface_exits ${cname_test}
	    if [ $? -eq 0 ]; then
		# not present, so we are good
		veth_name=${cname_test}
		done=t
	    else
		let count=$count+1
		if [ $count -gt 99 ]; then
		    echo "[ERROR]: unable to find a unique interface name for veth pairing"
		    exit 1
		fi
	    fi
	done
    fi
fi

if [ "${action}" = "up" ]; then
    echo "${pid}" > .cube.pid
    echo "${veth_name}" > .cube.veth
    cname=$(basename `pwd`)

    network=dynamic
    if [ -f cube.network.type ]; then
	network=$(cat cube.network.type)
    fi

    # This creates a veth pair.
    #
    #    <container name>[digit.digit] -> veth-br-int
    #
    #       which then transforms to:
    #
    #    <container name>[digit.digit] -> <container name>[digit.digit]
    #
    # One end remains in essential and the other in the container
    # namespace. We can find the container ns pid via the name of the
    # interface.
    #
    if [ -z "${pflask}" ]; then
	ip link add dev ${veth_name} type veth peer name veth-br-int
    fi

    # we are managing this device, so check for networkmanager and disable the
    # interface as managed
    nm=$(nsenter -t ${pid} -m sh -c "if [ -f /etc/NetworkManager/NetworkManager.conf ]; then echo \"nm\"; fi")
    if [ -n "${nm}" ]; then
	nm_unmanaged=$(nsenter -t ${pid} -m sh -c "grep unmanaged-devices /etc/NetworkManager/NetworkManager.conf | tail -1")
	if [ -n "${nm_unmanaged}" ]; then
	    echo "${nm_unmanaged}" | grep -q ${veth_name}
	    if [ $? -ne 0 ]; then
		# delete the old lines
		nsenter -t ${pid} -m sed -i "/[keyfile]/d" /etc/NetworkManager/NetworkManager.conf
		nsenter -t ${pid} -m sed -i "/${nm_unmanaged}/d" /etc/NetworkManager/NetworkManager.conf

		# and now the new line with the old + new interface
		nm_unmanaged="${nm_unmanaged};interface-name:${veth_name}"
	    else
		nm_unmanaged=""
	    fi
	else
	    nm_unmanaged="unmanaged-devices=interface-name:${veth_name}"
	fi
	if [ -n "${nm_unmanaged}" ]; then
	    nsenter -t ${pid} -m sh -c "echo \"[keyfile]\" >> /etc/NetworkManager/NetworkManager.conf"
	    nsenter -t ${pid} -m sh -c "echo \"${nm_unmanaged}\" >> /etc/NetworkManager/NetworkManager.conf"
	fi
    fi
    
    # Add the veth that stays in essential to the ovs-bridge. This gets us
    # connectivity to the network prime, and hence the outside world
    ovs-vsctl --may-exist add-port br-int ${veth_name}

    # push the container veth endpoint into the container network namespace
    # NOTE: also done by pflask
    if [ -n "${pflask}" ]; then
	# if we are pflask, rename the veth to the one we generated above
	ip link set ${veth_pflask} name ${veth_name}
	ip link set ${veth_name} up
	nsenter -t ${pid} -n ip link set ${veth_pflask} name ${veth_name}
    else
	# if we are NOT pflask, then we have to push the veth into the namespace
	# and then rename it.
	ip link set veth-br-int netns ${pid}
	nsenter -t ${pid} -n ip link set veth-br-int name ${veth_name}
    fi

    # Bring up the interface we just added to the bridge. It must be up so dhcp
    # can get an ip address.
    ip link set dev ${veth_name} up

    # TODO: we should have a third networking mode "self", which means that
    #       we'd make the veth available and let the container itself set up
    #       the networking (presumably via dhcp). This currently has issues
    #       with systemd lacking permissions and capabilities.
    #
    # Configure the container networking:
    #   1) loopback interface
    #   2) dhcp address for the ${veth_name}
    #   3) default route configuration
    #
    nsenter -t ${pid} -n --preserve-credentials ip link set dev lo up
    nsenter -t ${pid} -n --preserve-credentials ip link set dev ${veth_name} up
    if [ -f "cube.network.mac" ]; then
       mac_address=$(cat cube.network.mac)
    else
        # Use a hashed MAC address based on the container name
        mac_address=$(hashmac $(cat /etc/machine-id) ${cname})
    fi
    nsenter -t ${pid} -n --preserve-credentials ip link set dev ${veth_name} up address ${mac_address}

    if [ "${network}" == "dynamic" ]; then
	ip=$(c3-ipcfg alloc mac ${mac_address})
	if [ -n "${ip}" ]; then
	    nsenter -t ${pid} -n --preserve-credentials ip addr add "$ip/24" dev ${veth_name}
	    primary_ip=$ip
	else
	    echo "[ERROR]: unable to set ip by mac"
	    exit 1
	fi
    elif [ "${network}" == "dynamic-dhcp" ]; then
	command="dhclient -lf /opt/container/${cname}/rootfs/var/lib/dhcp/dhclient.leases -sf /usr/sbin/dhclient-script.container -e CONTAINER=${cname} --psig --no-pid ${veth_name} >> /dev/null 2>&1"
	if [ ! -d /opt/container/${cname}/rootfs/var/lib/dhcp ] ; then
	    mkdir -p /opt/container/${cname}/rootfs/var/lib/dhcp
	fi
	eval nsenter -t ${pid} -n -- ${command}
	if [ -e "/etc/resolv.conf.${cname}" ]; then
	    mv /etc/resolv.conf.${cname} /opt/container/${cname}/rootfs/etc/resolv.conf
	fi
	#nsenter -t ${pid} -n --preserve-credentials dhclient ${veth_name}
	primary_ip=$(nsenter -t ${pid} -n ip -o -4 addr list ${veth_name} | awk '{print $4}' | cut -d/ -f1)
    else
	# the ip must be in the format of address/mask, i.e.: 192.168.42.101/24
	ip=$(cat cube.network.ip)
	if [ -z "${ip}" ]; then
	    echo "ERROR: static networking selected and no IP provided"
	    exit 1
	fi
	
	# the first entry is the primary, any others are aliases
	count=0
	for i in ${ip}; do
	    if [ ${count} -eq 0 ]; then
		nsenter -t ${pid} -n --preserve-credentials ip addr add $i dev ${veth_name}
		primary_ip=$(echo $i | cut -d/ -f1)
	    else
		nsenter -t ${pid} -n --preserve-credentials ip addr add $i dev ${veth_name}:${count}
	    fi
	    let count=${count}+1
	done
    fi

    gateway="192.168.42.1"
    if [ -f "cube.network.gateway" ]; then
	gateway=$(cat cube.network.gateway)
    fi

    # device passthrough
    #
    # if no devices are passed through, then we need to set the default
    # route to the gateway (since no config script will ever be run)
    need_default_route=t
    if [ -f ".cube.device.network" ]; then
	# any non virtual ethernet devices ?
	netdevs=$(cat .cube.device.network)

	# Expand any network+ args
	netdevsexp=""
	for n in ${netdevs}; do
            if [ "${n}" = "${n/+/}" ] ; then
                netdevsexp="$n $netdevsexp"
            else
                device=$(echo ${n} | cut -f1 -d+)
                for nd in `ip -o link  |awk -F: '{print $2}'`; do
                    if [ "$nd" != "${nd#$device}" ] ; then
                        netdevsexp="$nd:$nd $netdevsexp"
                    fi
                done
            fi
	done

	for n in ${netdevsexp}; do
	    echo ${n} | grep -q veth
	    if [ $? -ne 0 ]; then
		# clear the default route flag, whatever ups the interface will
		# take care of this.
		need_default_route=

		# we have a real device
		device=$(echo ${n} | cut -f1 -d:)
		# push the device into the namespace If we are asked to move
		# a wireless interface, then we must actually move its phyN
		# device using iw command.
		phyname=""
		if [ -f "/sys/class/net/$device/phy80211/name" ]; then
                    phyname=`cat /sys/class/net/$device/phy80211/name`
		fi

		# push the device into the namespace
		# Note: done by pflask
		if [ -z "${pflask}" ]; then
		    if [ -n "$phyname" ]; then
			iw phy $phyname set netns ${pid}
		    else
			ip link set ${device} netns ${pid}
		    fi
		fi
		nsenter -t ${pid} -n --preserve-credentials ip link set dev ${device} up

		# setup nat and forwarding. this is what systemd-networkd does as well
		nsenter -t ${pid} -n --preserve-credentials iptables -t nat -A POSTROUTING -o ${device} -j MASQUERADE
		nsenter -t ${pid} -m -n -u -i -p -C --preserve-credentials sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'
	    fi
	done
    fi

    if [ -n "${need_default_route}" ]; then
	nsenter -t ${pid} -n --preserve-credentials ip route add default via ${gateway}
    fi

    ## TODO: this should be arbitrated to make sure we don't race, and so that dnsmasq
    ##       can be properly restarted
    vrf=dom0
    grep -q -w "${cname}.cube.lan" /opt/container/${vrf}/rootfs/etc/hosts
    if [ $? -eq 0 ]; then
	# the name is already in there, replace it
	sed -r "s/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3} ${cname}.cube.lan/${primary_ip} ${cname}.cube.lan/g" -i /opt/container/${vrf}/rootfs/etc/hosts
    else
	# add the name
	echo ${primary_ip} ${cname}.cube.lan >> /opt/container/${vrf}/rootfs/etc/hosts
    fi

    # note: this should be conditional with the fixed dhclient call abovee
    nameserver="192.168.42.1"
    if [ -f "cube.network.nameserver" ]; then
	nameserver=$(cat cube.network.nameserver)
    fi
    nsenter -t ${pid} -m sh -c "rm -f /etc/resolv.conf"
    nsenter -t ${pid} -m sh -c "echo nameserver ${nameserver} > /etc/resolv.conf"

    # and now some network namespace accounting
    mkdir -p /var/run/netns
    ln -sfT /proc/${pid}/ns/net /var/run/netns/${cname}

    # We need to track the pids of dhclient so it can be killed later if the
    # container dies. Since dhclient isn't in that pid namespace, it will live
    # on and keep the network device from returning to the root namespace
    rm -f /opt/container/${cname}/.netns.oci.pids
    for i in $(pidof dhclient); do
	ns=$(ip netns identify $i)
	if [ "${ns}" == "${cname}" ]; then
	    echo $i >> /opt/container/${cname}/.netns.oci.pids
	fi
    done
fi

if [ "${action}" = "down" ]; then
    ovs-vsctl --if-exists del-port br-int ${veth_name}

    interface_exists ${veth_name}
    if [ $? -eq 1 ]; then
	ip link del dev ${veth_name}
    fi

    cname=$(basename ${cubedir})

    if [ -z "${pid}" ]; then
	if [ -f ${cubedir}/.cube.pid ]; then
	    pid=$(cat ${cubedir}/.cube.pid)
	fi
    fi

    # physical device passthrough
    if [ -f "${cubedir}/.cube.device.network" ]; then
	# any non virtual ethernet devices ?
	netdevs=$(cat ${cubedir}/.cube.device.network)

	# Expand any network+ args
	netdevsexp=""
	for n in ${netdevs}; do
	    if [ "${n}" = "${n/+/}" ] ; then
		netdevsexp="$n $netdevsexp"
	    else
		device=$(echo ${n} | cut -f1 -d+)
		for nd in $(nsenter -t ${pid} -n ip -o link  |awk -F: '{print $2}'); do
		    if [ "$nd" != "${nd#$device}" ] ; then
			netdevsexp="$nd:$nd $netdevsexp"
		    fi
		done
	    fi
	done

	for n in ${netdevsexp}; do
	    echo ${n} | grep -q veth
	    if [ $? -ne 0 ]; then
		# we have a real device
		device=$(echo ${n} | cut -f1 -d:)

		# push the device into the root namespace If we are asked to
		# move a wireless interface, then we must actually move its
		# phyN device using iw command.
		phyname=""
		if [ -f "/sys/class/net/$device/phy80211/name" ]; then
                    phyname=`cat /sys/class/net/$device/phy80211/name`
		fi

		if [ -n "$phyname" ]; then
		    nsenter -t ${pid} -n iw phy $phyname set netns 1
		else
		    nsenter -t ${pid} -n ip link set ${device} netns 1
		fi
	    fi
	done
    fi

    # if pids are being tracked in our net namespace, make sure we kill them
    # before deleting it. Otherwise, the exit is not clean
    if [ -f "${cubedir}/.netns.pids" ]; then
	for p in $(cat "${cubedir}/.netns.pids"); do
	    kill -9 $p
	done
    fi

    if [ -f "${cubedir}/.netns.oci.pids" ]; then
	for p in $(cat "${cubedir}/.netns.oci.pids"); do
	    kill -9 $p
	done
    fi

    if [ -f "${cubedir}/.cube.veth" ]; then
	rm -f ${cubedir}/.cube.veth
    fi

    # cleans up the netns symlink made in the "up" path
    ip netns delete ${cname} 2> /dev/null
fi
