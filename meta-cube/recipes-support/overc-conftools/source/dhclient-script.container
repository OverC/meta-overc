#!/bin/sh
# dhclient-script for Linux. Dan Halbert, March, 1997.
# Updated for Linux 2.[12] by Brian J. Murrell, January 1999.
# No guarantees about this. I'm a novice at the details of Linux
# networking.

# Notes:

# 0. This script is based on the netbsd script supplied with dhcp-970306.

# 1. ifconfig down apparently deletes all relevant routes and flushes
# the arp cache, so this doesn't need to be done explicitly.

# 2. The alias address handling here has not been tested AT ALL.
# I'm just going by the doc of modern Linux ip aliasing, which uses
# notations like eth0:0, eth0:1, for each alias.

# 3. I have to calculate the network address, and calculate the broadcast
# address if it is not supplied. This might be much more easily done
# by the dhclient C code, and passed on.

# 4. TIMEOUT not tested. ping has a flag I don't know, and I'm suspicious
# of the $1 in its args.

# 'ip' just looks too weird.  /sbin/ip looks less weird.
ip=/sbin/ip

make_resolv_conf() {
  if [ x"$CONTAINER" != x ]; then
	suffix=$CONTAINER
  else	
	suffix=foo
  fi
  if [ x"$new_domain_name_servers" != x ]; then
    resolv_conf=""
    if [ x"$new_domain_search" != x ]; then
      resolv_conf="search ${new_domain_search}\n"
    elif [ x"$new_domain_name" != x ]; then
      # Note that the DHCP 'Domain Name Option' is really just a domain
      # name, and that this practice of using the domain name option as
      # a search path is both nonstandard and deprecated.
      resolv_conf="search ${new_domain_name}\n"
    fi
    for nameserver in $new_domain_name_servers; do
      resolv_conf="${resolv_conf}nameserver ${nameserver}\n"
    done

    echo -e "${resolv_conf}" > /etc/resolv.conf.$suffix
  elif [ "x${new_dhcp6_name_servers}" != x ] ; then
    resolv_conf=""

    if [ "x${new_dhcp6_domain_search}" != x ] ; then
      resolv_conf="search ${new_dhcp6_domain_search}\n"
    fi
    for nameserver in ${new_dhcp6_name_servers} ; do
      # If the nameserver has a link-local address
      # add a <zone_id> (interface name) to it.
      if [ "${nameserver##fe80::}" != "$nameserver" ] ||
         [ "${nameserver##FE80::}" != "$nameserver" ]
      then
	zone_id="%$interface"
      else
	zone_id=
      fi
      resolv_conf="${resolv_conf}nameserver ${nameserver}$zone_id\n"
    done

    echo -e "${resolv_conf}" > /etc/resolv.conf.$suffix
  fi
}

# Must be used on exit.   Invokes the local dhcp client exit hooks, if any.
exit_with_hooks() {
  exit_status=$1
  if [ -f /etc/dhcp/dhclient-exit-hooks ]; then
    . /etc/dhcp/dhclient-exit-hooks
  fi
# probably should do something with exit status of the local script
  if [ x$dhc_dbus != x -a $exit_status -eq 0 ]; then
    dbus-send --system --dest=com.redhat.dhcp \
      --type=method_call /com/redhat/dhcp/$interface com.redhat.dhcp.set \
      'string:'"`env | grep -Ev '^(PATH|SHLVL|_|PWD|dhc_dbus)\='`"
  fi
  exit $exit_status
}

# Invoke the local dhcp client enter hooks, if they exist.
if [ -f /etc/dhclient-enter-hooks ]; then
  exit_status=0
  . /etc/dhclient-enter-hooks
  # allow the local script to abort processing of this state
  # local script must set exit_status variable to nonzero.
  if [ $exit_status -ne 0 ]; then
    exit $exit_status
  fi
fi

###
### DHCPv4 Handlers
###

if [ x$new_broadcast_address != x ]; then
  new_broadcast_arg="broadcast $new_broadcast_address"
fi
if [ x$old_broadcast_address != x ]; then
  old_broadcast_arg="broadcast $old_broadcast_address"
fi
if [ -n "$new_subnet_mask" ]; then
    new_mask="/$new_subnet_mask"
fi
if [ -n "$alias_subnet_mask" ]; then
    alias_mask="/$alias_subnet_mask"
fi
if [ x$IF_METRIC != x ]; then
  metric_arg="metric $IF_METRIC"
fi

if [ x$reason = xMEDIUM ]; then
  # Linux doesn't do mediums (ok, ok, media).
  exit_with_hooks 0
fi

if [ x$reason = xPREINIT ]; then
  if [ x$alias_ip_address != x ]; then
    # Bring down alias interface. Its routes will disappear too.
    ${ip} -4 addr flush dev ${interface} label ${interface}:0
  fi
  ${ip} link set dev ${interface} up

  exit_with_hooks 0
fi

if [ x$reason = xARPCHECK ] || [ x$reason = xARPSEND ]; then
  exit_with_hooks 0
fi
  
if [ x$reason = xBOUND ] || [ x$reason = xRENEW ] || \
   [ x$reason = xREBIND ] || [ x$reason = xREBOOT ]; then
  current_hostname=`hostname`
  if [ x$current_hostname = x ] || \
     [ x$current_hostname = "x(none)" ] || \
     [ x$current_hostname = xlocalhost ] || \
     [ x$current_hostname = x$old_host_name ]; then
    if [ x$new_host_name != x$old_host_name ]; then
      hostname "$new_host_name"
    fi
  fi
    
  if [ x$old_ip_address != x ] && [ x$alias_ip_address != x ] && \
		[ x$alias_ip_address != x$old_ip_address ]; then
    # Possible new alias. Remove old alias.
    ${ip} -4 addr flush dev ${interface} label ${interface}:0
  fi
  if [ x$old_ip_address != x ] && [ x$old_ip_address != x$new_ip_address ]; then
    # IP address changed. Bringing down the interface will delete all routes,
    # and clear the ARP cache.
    ${ip} -4 addr flush dev ${interface} label ${interface}

  fi
  if [ x$old_ip_address = x ] || [ x$old_ip_address != x$new_ip_address ] || \
     [ x$reason = xBOUND ] || [ x$reason = xREBOOT ]; then

    ${ip} -4 addr add ${new_ip_address}${new_mask} ${new_broadcast_arg} \
                dev ${interface} label ${interface}
    if [ -n "$new_interface_mtu" ]; then
      # set MTU
      ${ip} link set dev ${interface} mtu ${new_interface_mtu}
    fi
    # Add a network route to the computed network address.
    for router in $new_routers; do
      if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
        ${ip} -4 route add ${router} dev $interface >/dev/null 2>&1
      fi
      ${ip} -4 route add default via ${router} dev ${interface} \
        ${metric_arg} >/dev/null 2>&1
    done
  else
    # we haven't changed the address, have we changed other options           
    # that we wish to update?
    if [ x$new_routers != x ] && [ x$new_routers != x$old_routers ] ; then
      # if we've changed routers delete the old and add the new.
      for router in $old_routers; do
        ${ip} -4 route delete default via ${router}
      done
      for router in $new_routers; do
        if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	      ${ip} -4 route add ${router} dev $interface >/dev/null 2>&1
	    fi
        ${ip} -4 route add default via ${router} dev ${interface} \
          ${metric_arg} >/dev/null 2>&1
      done
    fi
  fi
  if [ x$new_ip_address != x$alias_ip_address ] && [ x$alias_ip_address != x ];
   then
    ${ip} -4 addr flush dev ${interface} label ${interface}:0
    ${ip} -4 addr add ${alias_ip_address}${alias_mask} \
        dev ${interface} label ${interface}:0
    ${ip} -4 route add ${alias_ip_address} dev ${interface} >/dev/null 2>&1
  fi
  make_resolv_conf
  exit_with_hooks 0
fi

if [ x$reason = xEXPIRE ] || [ x$reason = xFAIL ] || [ x$reason = xRELEASE ] \
   || [ x$reason = xSTOP ]; then
  if [ x$alias_ip_address != x ]; then
    # Turn off alias interface.
    ${ip} -4 addr flush dev ${interface} label ${interface}:0
  fi
  if [ x$old_ip_address != x ]; then
    # Shut down interface, which will delete routes and clear arp cache.
    ${ip} -4 addr flush dev ${interface} label ${interface}
  fi
  if [ x$alias_ip_address != x ]; then
    ${ip} -4 addr add ${alias_ip_address}${alias_network_arg} \
        dev ${interface} label ${interface}:0
    ${ip} -4 route add ${alias_ip_address} dev ${interface} >/dev/null 2>&1
  fi
  exit_with_hooks 0
fi

if [ x$reason = xTIMEOUT ]; then
  if [ x$alias_ip_address != x ]; then
    ${ip} -4 addr flush dev ${interface} label ${interface}:0
  fi
  ${ip} -4 addr add ${new_ip_address}${new_mask} ${new_broadcast_arg} \
            dev ${interface} label ${interface}
  if [ -n "$new_interface_mtu" ]; then
    # set MTU
    ip link set dev ${interface} mtu ${new_interface_mtu}
  fi
  set $new_routers
  if ping -q -c 1 $1; then
    if [ x$new_ip_address != x$alias_ip_address ] && \
			[ x$alias_ip_address != x ]; then
      ${ip} -4 addr add ${alias_ip_address}${alias_mask} \
            dev ${interface} label ${interface}:0
      ${ip} -4 route add ${alias_ip_address} dev ${interface} >/dev/null 2>&1
    fi
    for router in $new_routers; do
      if [ "x$new_subnet_mask" = "x255.255.255.255" ] ; then
	    ${ip} -4 route add ${router} dev $interface >/dev/null 2>&1
      fi
      ${ip} -4 route add default via ${router} dev ${interface} \
        ${metric_arg} >/dev/null 2>&1
    done
    make_resolv_conf
    exit_with_hooks 0
  fi
  ${ip} -4 addr flush dev ${interface}
  exit_with_hooks 1
fi

###
### DHCPv6 Handlers
###

if [ x$reason = xPREINIT6 ] ; then
  # Ensure interface is up.
  ${ip} link set ${interface} up

  # Remove any stale addresses from aborted clients.
  ${ip} -f inet6 addr flush dev ${interface} scope global permanent

  exit_with_hooks 0
fi

if [ x${old_ip6_prefix} != x ] || [ x${new_ip6_prefix} != x ] ; then
    echo Prefix ${reason} old=${old_ip6_prefix} new=${new_ip6_prefix}

    exit_with_hooks 0
fi

if [ x$reason = xBOUND6 ] ; then
  if [ x${new_ip6_address} = x ] || [ x${new_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr add ${new_ip6_address}/${new_ip6_prefixlen} \
	dev ${interface} scope global

  # Check for nameserver options.
  make_resolv_conf

  exit_with_hooks 0
fi

if [ x$reason = xRENEW6 ] || [ x$reason = xREBIND6 ] ; then
  if [ x${new_ip6_address} != x ] && [ x${new_ip6_prefixlen} != x ] ; then
    ${ip} -f inet6 addr add ${new_ip6_address}/${new_ip6_prefixlen} \
	dev ${interface} scope global
  fi

  # Make sure nothing has moved around on us.

  # Nameservers/domains/etc.
  if [ "x${new_dhcp6_name_servers}" != "x${old_dhcp6_name_servers}" ] ||
     [ "x${new_dhcp6_domain_search}" != "x${old_dhcp6_domain_search}" ] ; then
    make_resolv_conf
  fi

  exit_with_hooks 0
fi

if [ x$reason = xDEPREF6 ] ; then
  if [ x${new_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr change ${new_ip6_address}/${new_ip6_prefixlen} \
       dev ${interface} scope global preferred_lft 0

  exit_with_hooks 0
fi

if [ x$reason = xEXPIRE6 -o x$reason = xRELEASE6 -o x$reason = xSTOP6 ] ; then
  if [ x${old_ip6_address} = x ] || [ x${old_ip6_prefixlen} = x ] ; then
    exit_with_hooks 2;
  fi

  ${ip} -f inet6 addr del ${old_ip6_address}/${old_ip6_prefixlen} \
	dev ${interface}

  exit_with_hooks 0
fi

exit_with_hooks 0
