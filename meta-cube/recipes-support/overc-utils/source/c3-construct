#!/bin/bash

# "c3-construct" preprocessor and congifuration.

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

version="0.1"

usage()
{
cat << EOF

 c3-construct [--help] [--force] [-i] [-w] [-o outfile] [-D<var>=<value>] [-I<path>] [-v] infiles

      --help:      This message
      --force:     force overwrite output file if it already exists
      -D:          define <var> to <value> which will be available to sub scripts
      -I:          include path <path> will be searched for files
      -i:          leave intermediate files on failure
      -w:          only warn on missing files
      -v:          verbose output
      -o:          outfile file for processed results. stdout is used if not passed

      infiles      files to use for constructing the container

EOF
}

BASEDIR=$(dirname $BASH_SOURCE)
declare -A DEFINE_MAP

if [ -z "$1" ]; then
    usage
    exit 1
fi

while [ $# -gt 0 ]; do
    case "$1" in
	--help)
	    usage
	    exit
	    ;;
	-D*|--D*)
	    if [ "$1" == "-D" ] || [ "$1" == "--D" ]; then
		x=$2; shift;
	    else
		x=$(echo $1 | sed s%^-*D%%)
	    fi
	    defines="$defines $x"
	    ;;
	-I*|--I*)
	    if [ "$1" == "-I" ] || [ "$1" == "--I" ]; then
		x=$2; shift;
	    else
		x=$(echo $1 | sed s%^-*I%%)
	    fi
	    if [ -n "$x" ] && [ -d "$x" ]; then
		include_paths="$include_paths $(readlink -f $x)"
	    fi
	    ;;
	--cmds)
            cmds=$2
            shift
            ;;
	--force|-f)
	    force=t
	    ;;
        --fuzz)
	    fuzz=t
	    ;;
	-i)
	    intermediate=t
	    ;;
	-w)
	    warn_on_missing=t
	    ;;
	-o)
	    outfile=$2
	    shift
	    ;;
	-v) verbose=t
	    ;;
	*) break
	   ;;
    esac
    shift
done

err()
{
    echo "$@" 1>&2
}

warn()
{
    err "$@"
}

# removes any common prefixes from a name (path, patch, etc). With
# these removed, the resulting name is now relative to a set of
# search paths, and can be found later.
strip_common_prefix()
{
    in_name=$1

    # this takes an input name and searches all known paths.
    # the relocation that removes the MOST from the original is
    # the one we want, since it is the best match by definition
    out_len=${#in_name}
    relocated_name=$in_name
    for r in $include_paths; do
	t=$(echo $in_name | sed s%$r%%)
	this_len=${#t}
	if [ $this_len -lt $out_len ]; then
	    relocated_name=$t
	    out_len=$this_len
	fi
	# add a trailing slash to get corner cases where one may
	# have been added or not dropped
	t=$(echo $in_name/ | sed s%$r%%)
	this_len=${#t}
	if [ $this_len -lt $out_len ]; then
	    relocated_name=$t
	    out_len=$this_len
	fi
    done

    if [ ! -f ${relocated_name} ]; then
        # remove any leading slashes
        relocated_name=$(echo ${relocated_name} | sed 's%^//*%%g')
    fi
    echo "$relocated_name"
}


# looks for a .c3 file that matches a set of defines (keywords)
search_includes_for_defines()
{
    defines=$1
    found_c3=

    declare -A define_map
    if [ -n "$defines" ]; then
        # this could totally just be a loop .. but we only need three, so
        # keep it simple. The array allows us to easily weed out duplicate
        # defines
        define_tgt=$(echo $defines | cut -d: -f1)
        if [ -n "${define_tgt}" ]; then
            define_map[${define_tgt}]=t
        fi
        define_tgt=$(echo $defines | cut -d: -f2)
        if [ -n "${define_tgt}" ]; then
            define_map[${define_tgt}]=t
        fi
        define_tgt=$(echo $defines | cut -d: -f3)
        if [ -n "${define_tgt}" ]; then
            define_map[${define_tgt}]=t
        fi
    fi

    max_score=0
    c3s_that_define=`find $include_paths -name '*.c3' \
                                | xargs grep -l -e '^[[:space:]]*define.*' | sort | uniq`
    for c3 in $c3s_that_define; do
        score=0
        for tgt in ${!define_map[@]}; do
            if [ -n "$tgt" ]; then
                f=`grep -l -e '^[[:space:]]*define.*'$tgt'[[:space:]]*\$' $c3`
                if [ -n "$f" ]; then
                    score=`expr $score + 1`
                fi
            fi
        done

        if [ -n "${verbose}" ]; then
            >&2 echo "checking $c3 ($score)" >&2
        fi

        if [ $score -gt $max_score ]; then
            found_c3="$c3"
            max_score=$score
        elif [ $score -eq $max_score ]; then
            found_c3="$found_c3 $c3"
        fi
    done

    if [ -n "${verbose}" ]; then
        >&2 echo "score: $max_score"
    fi

    if [ $max_score -gt 0 ]; then
        # return the first target found (among equals)
        rstring="$(echo $found_c3 | cut -f2 -d' ')"

        # .. and add the score
        echo "$rstring:$max_score"
    fi
}

search_include_paths()
{
    local tgt=$1
    shift
    local includes="$@"
    local exclude_files=""
    local base
    local feature_ext=".c3"
    local possible=""

    if [ -n "$verbose" ]; then
        echo "search_includes: $tgt" >&2
        echo "include paths: "  >&2
        for i in $includes; do
            echo "   $i"  >&2
        done
    fi

    # if the path is absolute, we are done
    if [ -f "${tgt}" ]; then
        echo ${tgt}
        return
    fi

    case $tgt in
        *.patch)
            feature_ext=".patch"
            ;;
        *.cfg)
            feature_ext=".cfg"
            ;;
        *.c3)
            feature_ext=".c3"
	    ;;
    esac

    # remove the feature extension (if present) from the input name
    tgt=${tgt%$feature_ext}
    base=$(basename $tgt)

    if [ -z "$exclude_files" ]; then
        exclude_files="/dev/null"
    fi

    for p in "." $includes; do
        # target file + default feature extension
        if [ -f $p/$tgt$feature_ext ]; then
            possible=$(readlink -f "$p/$tgt$feature_ext")
        # raw target file
        elif [ -f $p/$tgt ]; then
            possible=$(readlink -f "$p/$tgt")
        # special processing test the include directory +
        # the name of the feature. This saves us doing a massive
        # set of includes for sub categories includes
        elif [ -f $p/$tgt/$tgt$feature_ext ]; then
            possible=$(readlink -f "$p/$tgt/$tgt$feature_ext")
        elif [ -f $p/$tgt/$tgt ]; then
            possible=$(readlink -f "$p/$tgt/$tgt")
            # more special processing. test if the included
            # feature is actually just the name of a directory
            # AND there is not file with the same name present.
            # if that is true, then test for:
            #     <tgt>/<tgt>.extension
            # in that directory
        elif [ -f $p/$tgt/$base$feature_ext ]; then
            possible=$(readlink -f "$p/$tgt/$base$feature_ext")
        elif [ -f $p/$tgt/$base ]; then
            possible=$(readlink -f "$p/$tgt/$base$feature_ext")
        fi

        if [ -n "$possible" ]; then
            echo "$exclude_files" | grep -q "$possible"
            if [ $? -ne 0 ]; then
                echo $possible
                return
            fi
            possible=
        fi
    done
}

# args are the input files
infiles=$@

processed_files=""

##
## create variables for use in scripts
##
if [ -n "$defines" ]; then
    vars=$(echo $defines | sed 's/,/ /g')
    for v in "$vars"; do
	# eval makes it available for this script
	eval $v
    done
fi

if [ -z "$infiles" ]; then
    err "ERROR: at least one input file must be supplied"
    exit 1
else
    for f in $infiles; do
        expanded_file=$(search_include_paths $f $include_paths)
        if [ -z "${expanded_file}" ]; then
	    err "ERROR. input file \"$f\" does not exist"
	    exit 1
        fi
    done
fi

if [ -n "$outfile" ] && [ -f "$outfile" ]; then
    if [ -z "$force" ]; then
	err "ERROR: output file \"$outfile\" exists, and --force was not passed"
	exit 1
    fi
else
    outfile="$(mktemp)"
fi
outfile_append=">> $outfile"

# used by preprocessor directives to define values, very
# similar to the block above which processes command line
# values. These could be unified, but it is easier to keep the
# separate for now
var_define()
{
    var=$1
    value="$2"

    # make the variable real
    eval $var="\"$value\""
}

symbol_define() {
    local define_name=$1
    local define_value=$2

    #echo "defining $define_name $define_value"
    DEFINE_MAP["$define_name"]="${define_value}"
}

header()
{
    echo "#"
    echo "# c3 v$version"
    echo "# processed: `date`"
    echo "#"
    echo "# This is a preprocessor output file, do not edit"
    echo "#"

    for i in $include_paths; do
	# strip a trailing /
	abs_dir=$(readlink -f $i)
	abs_dir2=$(cd $i; pwd)
	if [ x"$abs_dir" != x"$abs_dir2" ]; then
	    # there is some sort of symlink trickery going on.
	    # add both dirs to the relocation list
	    abs_dir="$abs_dir $abs_dir2"
	fi

	for d in $abs_dir; do
	    one_less_dir=${d%/}
	    # strip last path component
	    one_less_dir=${one_less_dir%/*}

	    echo "reloc_dir $one_less_dir"
	done
    done

    echo "#"
}

# arg1: duration
# remaining: the processed files
footer()
{
    local duration=$1
    shift
    local infiles=$@

    echo "# run time: $duration seconds"
    echo "# processed files:"
    for f in $infiles; do
	echo "# _cfg $f"
    done
}

preprocess_file()
{
    local in=$1
    local containing_file=$2
    shift
    local flags=$@
    local inherited_inhibit_cfg=""
    local ret=0
    local done=""
    local arg1
    local OLDIFS
    local fline
    local include_name
    local inhibit_cfg
    local working_dir=$(dirname ${containing_file})

    if [ -z "$in" ]; then
        return
    fi

    if [ -n "${verbose}" ]; then
        echo "[INFO]: processing $in" 1>&2
    fi

    case $in in
        *.c3)
            # do nothing, the rest of this function handles things
            ;;
        *.cfg)
	    # catch and return. special processing could go here
            return
            ;;
    esac

    # process the flags to this file processing
    for flag in $flags; do
        case $flag in
            nocfg) inherited_inhibit_cfg=nocfg
                ;;
        esac
    done

    if [ ! -f "$in" ]; then
        local_includes=$(dirname $containing_file)
        new_in=$(search_include_paths $in $include_paths $local_includes)
        if [ ! -f "$new_in" ]; then
            err "ERROR: could not find file $in, included from $containing_file"
            return 1
        fi
        in=$new_in
    else
        in=$(readlink -f $in)
    fi

    echo "$processed_files" | grep -q "$in"
    if [ $? -eq 0 ]; then
        echo "# NOTE: feature `basename $in` has already been processed"
    fi
    processed_files="$processed_files $in"

    OLDIFS=$IFS
    IFS='
'
    echo "# --> file: $in"
    echo "# flags: $flags"
    echo "# mark $(basename $in) start"

    #>&2 date +%s%3N
    for fline in $(cat $in); do
        done=""

	case $fline in
	    *include*)
		# include
		echo $fline | grep -q "^[[:space:]]*include"
		if [ $? -eq 0 ]; then
		    include_name=$(echo $fline | cut -f2 -d' ')

		    # if we were called with inhibit flags, passing them along is
		    # the default
		    inhibit_cfg=$inherited_inhibit_cfg

		    # if we have a "nocfg" or "nopatch" on the include directive,
		    # then we need to set the variables so they'll be passed down to
		    # the nested process call
		    echo "$fline" | grep -q "[[:space:]]\+nocfg"
		    if [ $? -eq 0 ]; then
			inhibit_cfg=nocfg
		    fi

		    IFS=$OLDIFS
		    preprocess_file $include_name $in $inhibit_cfg
		    ret=$?
		    if [ $ret -eq 1 ]; then
			return $ret
		    fi

		    # we can clear the inhbit flag, only if it wasn't passed into
		    # us from above. This allows local .cfg files to be processed.
		    if [ -z "$inherited_inhibit_cfg" ]; then
			inhibit_cfg=""
		    fi

		    done=t
		    IFS='
'
		fi
		;;
	    *define*)
		## preprocessor define
		echo $fline | grep -q "^[[:space:]]*#define"
		define_ret=$?
		if [ -z "$done" ] && [ $define_ret -eq 0 ]; then
		    IFS=$OLDIFS
		    define_name=$(echo $fline | cut -f2 -d' ')
		    define_value=$(echo $fline | cut -f3 -d' ')
		    # if [ -z "$define_value" ]; then
		    # 	define_value=t
		    # fi

		    symbol_define $define_name $define_value

		    IFS='
'
		    done=t
		fi
		;;
	    esac

        if [ -z "$done" ]; then
	    # do symbol translation and then output the line
	    fline_orig=${fline}
	    for K in "${!DEFINE_MAP[@]}"; do
		# replace if the define exists, and has a non-zero replacement value
		if [ -n "${DEFINE_MAP[$K]}" ]; then
		    fline=$(echo "${fline}" | sed "s/${K}/${DEFINE_MAP[$K]}/g")
		fi
	    done
            echo "$fline"
        fi
    done
    IFS=$OLDIFS

    #>&2 date +%s%3N
    echo "# mark `basename $in` end"
    echo "# <-- done file: $in"
    echo "#"

    return 0
}

#
# override function takes the name of an already defined function and saves it
# as "<foo>_old" (or save_name if passed), and then declares a stub function of
# the original function name to inhibit any future calls to that function.
#
override_function()
{
    orig=$1
    save_name=$2

    if [ -z "$save_name" ]; then
        save_name=old_$1
    fi

    local ORIG_FUNC=$(declare -f $orig)
    if [ -n "${ORIG_FUNC}" ]; then
        local NEWNAME_FUNC="$save_name${ORIG_FUNC#$orig}"
        eval "$NEWNAME_FUNC"
        # create the override function
        o="$orig () { true; }"
        eval "${o}"
    fi
}

do_construct()
{
    local in=$1
    local ret=0
    local done=""
    local c3_output_file="$(mktemp)"
    local c3_good_output="$(mktemp)"
    local c3_tmpdir=$(mktemp -d -t c3-construct.XXXXXX)

    mkdir "${c3_tmpdir}/bin"

    # source the file, but clear the path, since we only want commands
    # that we declare as valid to run
    (
	shopt -s expand_aliases
	for K in "${!DEFINE_MAP[@]}"; do
	    if [ -z "${DEFINE_MAP[${K}]}" ]; then
		fns_to_alias="${fns_to_alias} ${K}"
	    fi
	done
	for c in ${cmds_to_source}; do
	    if [ -n "${verbose}" ]; then
		echo "[INFO]: sourcing command: $c"
	    fi

	    # this tells us the commands/functions that are defined in each cmd file
	    fns="${fns} $(bash -c "source $c; typeset -f" | awk '/ \(\) $/ && !/^main / {print $1}' | tr '\n' ' ')"
	done

	#
	# we are going to loop over those functions and find the real binary that
	# implements the same function (if there is one). For each one we find, we
	# create a variable for that command.
	#
	# Why would we do this ? So our wrapper functions can actually call the command
	# in the shell limited environment
	#
	# Note: yes, this won't scale well to a lot of functions and defines, but for
	#       now, that is fine. This shouldn't be written in bash if we want that
	#       sort of scalability
	#

	i_list=$(echo "${fns} ${fns_to_alias}" | tr ' ' '\n' | sort | uniq | xargs)
	for f in ${i_list}; do
	    program_to_find="${f}"
	    var_for_use_in_env="${f}"

	    mapping=
	    alias=
	    # This checks for the existence of a key in the array. if it exists, we
	    # then check if it has a non-zero value.
	    #
	    # A non-zero value means we had: "#define foo var", and in that case we are
	    # doing a mapping of function 'a' to 'b'.
	    #
	    # A zero value means we had: "#define foo", and in that case we are creating
	    # an alias for the value.
	    if [ ${DEFINE_MAP[$f]+isset} ]; then
		if [ -z "${DEFINE_MAP[$f]}" ]; then
		    alias=t
		    echo "${fns}" | grep -q -w "${f}"
		    if [ $? -eq 0 ]; then
			mapping=t
		    fi
		else
		    mapping=t
		fi
	    else
		mapping=t
	    fi

	    # Get all the keys, see what they are mapped to, the mapped value may
	    # match a function provided in the routine. This allows us to determine
	    # that a symbol was translated in the input file, and we should look for
	    # that original value for the executable variable.
	    for K in "${!DEFINE_MAP[@]}"; do
		# echo "checking $f against -${DEFINE_MAP[$K]}-"
		if [ "${f}" = "${DEFINE_MAP[$K]}" ]; then
		    # we have a match of a symbol that is will be translated
		    program_to_find="$K"
		fi
	    done

	    real_program=$(which ${program_to_find} 2> /dev/null)
	    if [ -n "${mapping}" ]; then
		#echo "making a variable ${var_for_use_in_env}=${real_program}"
		declare -g "${var_for_use_in_env}=${real_program}"
	    fi
	    if [ -n "${alias}" ]; then
		if [ -z "${real_program}" ]; then
		    real_program=$(which false)
		fi
		if [ -n "${verbose}" ]; then
		    echo "[INFO]: linking $f to ${real_program}"
		fi
		ln -sf ${real_program} ${c3_tmpdir}/bin/${program_to_find}
	    fi
	done

	for z in ${cmds_to_override}; do
	    if [ -n "${verbose}" ]; then
		echo "[INFO]: disabling command: $z"
	    fi
	    # Note: this only works for .cmds that have a single function
	    #       which matches the name of the command
	    override_function $(basename "$z" .cmd)
	done

	PRIV_PATH=$PATH
	unset PATH
	(
	    set -e
	    export PATH="${c3_tmpdir}/bin"
	    export PRIV_PATH=$PRIV_PATH

	    (eval . $in 1>&2) 2> >(tee ${c3_output_file}) > >(tee ${c3_good_output})
	)
    )

    if [ $? -ne 0 ]; then
	echo "[ERROR]: processing of file $in failed"

	cat ${c3_output_file}
	cat ${c3_good_output}

	# look for common errors so we can point to the right input file

	# 1) /tmp/tmp.gfN6WsbDHN: line 403: cat: No such file or directory
	#     "grep -oh" will only output what matches, which gets us "line 404: .."
	#     cut gets us the second field, which is the line number
	line=$(cat ${c3_output_file} | grep -oh "line.*:" | cut -f2 -d' ' | sed 's/://g')
	if [ -n "$line" ]; then
	    let start_line=$line-20
	    let end_line=$line+10
	    if [ $start_line -lt 0 ]; then
		start_line=1
	    fi
	    echo ""
	    echo "Context around the error is:"
	    echo ""
	    sed -n -e "$start_line,$end_line p" -e "$end_line q" $in | sed 's/^/    /'
	    echo ""
	    echo "See pre-processed file $in for more details"
	fi
	rm -f ${c3_output_file}
	exit 1
    elif [ -n "${verbose}" ]; then
        cat ${c3_output_file}
	cat ${c3_good_output}
    else
	cat ${c3_good_output}
    fi

    rm -f ${c3_output_file}
    rm -f ${c3_good_output}
    rm -rf ${c3_tmpdir}
    return 0
}


# load commands
#
# This routine searches and preps commands (.cmd) for loading. These
# shell snippets are pulled in to make commands available in the limited
# execution environment.
#
# "cmds" comes from the command line and is a comma separated list of
# valid command 'blocks' to load. If cmds is empty, it means that all
# found commands will be loaded.
#
all_cmds=""
cmds=$(echo "${cmds}" | sed 's/,/ /g')
for cmd in ${BASEDIR}/c3-cmds/*.cmd; do
    valid=
    if [ -n "${cmds}" ]; then
        # check the cmd against the command line listed ones
        check_cmd=$(basename "$cmd" .cmd)
        echo $cmds | grep -q -w $check_cmd
        if [ $? -eq 0 ]; then
            # the command is in the valid list
            valid=t
        fi
        # we always load "auto.cmd"
        if [ "$check_cmd" == "auto" ]; then
            valid=t
        fi
    else
        valid=t
    fi

    if [ -n "${valid}" ]; then
        if [ -n "${verbose}" ]; then
            echo "[INFO]: queued $cmd" >&2
        fi
        cmds_to_source="${cmds_to_source} $cmd"
	# queue these for pre-processing
	infiles="$cmd $infiles"
    else
        cmds_to_override="${cmds_to_override} $cmd"
    fi

    all_cmds="${all_cmds} $cmd"
done

do_preprocess() {
    start_time=$(date +"%s")

    if [ -n "$outfile" ]; then
	header > $outfile
    else
	header
    fi

    for f in $infiles; do
	if [ -z "$fail" ]; then
	    if [ -n "$outfile" ]; then
		preprocess_file $f $f >> $outfile
		ret=$?
		if [ $ret -eq 1 ]; then
		    fail=t
		fi
	    else
		preprocess_file $f $f
		ret=$?
		if [ $ret -eq 1 ]; then
		    fail=t
		fi
	    fi
    fi
    done

    if [ -n "$fail" ]; then
	if [ -z "$intermediate" ]; then
	    rm -f $outfile
	fi
	exit $ret
    fi

    stop_time=$(date +"%s")
    duration=$(expr $stop_time - $start_time)

    if [ -n "$outfile" ]; then
	footer $duration $infiles >> $outfile
    else
	footer $duration $infiles
    fi
}

echo "[INFO]: preprocessing files"
do_preprocess

echo "[INFO]: starting construction"
do_construct $outfile

if [ -z "$intermediate" ]; then
    rm -f $outfile
else
    #echo "[INFO]: intermediate results are in file $outfile"
    cat $outfile
    # remove this later
    rm -f $outfile
fi
exit $ret
