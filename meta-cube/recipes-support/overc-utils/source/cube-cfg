#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

mydir=`dirname $0`
PATH=$mydir:$PATH

if [ "$CUBE_DEBUG_SET_X_IF_SET" = 1 ] ; then
    set -x
fi

usage_global()
{
    output=$(mktemp)
cat << EOF > ${output}

 ${0##*/} [--clean] <command> <value>

 global options:

   --clean: remove artifacts before performing <command>
   -o     : output/config directory
   -n     : container name
   -r     : temporary (runonce) value

 commands (and options):

EOF
    usage_gen >> ${output}
    usage_show >> ${output}
    usage_mount >> ${output}
    usage_auth >> ${output}
    usage_hook >> ${output}
    usage_link >> ${output}
    usage_device >> ${output}
    usage_id >> ${output}
    usage_attribute >> ${output}
    usage_get_set >> ${output}

    cat ${output} | less

    rm -f ${output}
}

usage_gen()
{
cat << EOF
 ${0##*/} gen <name>:<type>

    generate a base configuration

       <name>:<type> container name and type

EOF
}

usage_show()
{
cat << EOF
 ${0##*/} show <name>

    show the configuration options for container <name>

EOF
}
usage_mount()
{
cat << EOF
 ${0##*/} [-n <container name>] mount <type>:<name>:<name>

    mount a directory into the container

       <type>:       optional "bind" if a bind mount is to be used
       <name>:<name> source and destination directory

EOF
}
usage_auth()
{
cat <<EOF
 ${0##*/} auth <type>:<userid>:<password>

    Create an authorization

       <type>:       Type of registry: "docker" or "cube"
       <userid>:
       <password>

    Authorization will be stored in the user's home directory .overc/auths.json

    If a container name is provided via [-n <name>], then the authorization is
    stored per-container in the same "auths.json" file.

    if only <type> is provided, then the default authorization for that registry
    type will be returned.

EOF
}
usage_hook()
{
cat <<EOF
 ${0##*/} [-n <container name>] hook <type>:<name>
 ${0##*/} [-n <container name>] hook-script <type>:<name>

    Add a hook into the container lifecycle

       hook         the hook is an executable
       hook-script  the hook is a script

       <type>       type of hook: prestart, poststart or poststop
       <name>       full path to the hook

EOF
}

usage_link()
{
cat <<EOF
 ${0##*/} link      <container one>:<port> <container two>:<name> [from <ip or "localhost">]
          link-raw  <container> <command>
          link-edit <container>

     Modify the linkages betwen containers. The runtime linkage is
     completed by the 'cube-ctl stack' command.

       link         ensures that the port of container one is linked
                    (forwarded) to container two.
       link-raw     exports the passed command to a location where
                    cube-ctl stack will process it. The correctness of
                    the command is up to the user
       link-edit    invokes $EDITOR to manipulated the staged link
                    commands.

EOF
}
usage_device()
{
cat <<EOF
 ${0##*/} [-n <container name>] device <type>:<name>:<name>

    add a device to a container

       <type>:           network, network-virt, vt
          <name>:<name>  device name in essential : device name in container

       <type>:           whitelist, blacklist
          <name>         name of the device to blacklist/whitelist

       <type>:           console
          <type>:<value> type: tty or vt. value: tty or VT number

EOF
}
usage_id()
{
cat <<EOF
 ${0##*/} [-n <container name>] id

    get the unique machine / platform identifier

EOF
}
usage_attribute()
{
cat <<EOF
${0##*/} [-n <container name>] attribute [+][-] <attribute>

    associated an attribute with a container. + to add, - to remove.

EOF
}

usage_get()
{
    usage_get_set
}
usage_set()
{
    usage_get_set
}
usage_get_set()
{
cat <<EOF
 ${0##*/} get/set:

   NOTE: variables with embedded / are etcd set/get operations.
   NOTE: --append or --prepend can be used in combination with 'set'

   set:
     ${0##*/} [-n <container name>] [-o <output dir>] set <setting>:<value>
     ${0##*/} [-n <container name>] [-o <output dir>] <setting>:<value>

   get:
     ${0##*/} [-n <container name>] [-o <output dir>] get <setting>
     ${0##*/} [-n <container name>] [-o <output dir>] <setting>:

   clear/delete:
     ${0##*/} [-n <container name>] [-o <output dir>] :<setting>

    valid settings are:

EOF

for K in "${!CONFIG_MAP[@]}"; do
    help_text=$(echo "${CONFIG_MAP[$K]}" | cut -f4 -d\;)
    printf "      %-25s %s\n" "$K" "${help_text}"
done
echo ""
}

declare -A CONFIG_MAP

# The key is the variable value on the command line, followed by the
# variable to set in the database semi-colon help text
#
#  <var> <db var>; <help text>
#

CONFIG_MAP[app]="cube.app;app_hook;single;The application to start in the container"
CONFIG_MAP[cube.container.mgr]="cube.container.mgr;mgr_hook;single;The manager for the container: the path to the container runtime"
CONFIG_MAP[cube.console.mgr]="cube.console.mgr;noop;single;The console manager (if access is not direct): 'tty' or 'screen-tty'"
CONFIG_MAP[cube.device.mgr]="cube.device.mgr;noop;single;The device manager for the container: essential (static) or detected/standalone"
CONFIG_MAP[autostart]="autostart;noop;single;The autostart runlevel for the container"
CONFIG_MAP[cube.network.type]="cube.network.type;noop;single;The type of container networking: static or dynamic"
CONFIG_MAP[cube.network.ip]="cube.network.ip;noop;single;<ip>/<netmask>. The ip to assign to the container (must be supplied for static network type)"
CONFIG_MAP[cube.network.mac]="cube.network.mac;noop;single;The mac address to assign to the container interface"
CONFIG_MAP[cube.network.gateway]="cube.network.gateway;noop;single;The gateway to use for the container"
CONFIG_MAP[cube.network.nameserver]="cube.network.nameserver;noop;single;The nameserver to use for the container"
CONFIG_MAP[cube.env]="cube.env;noop;multi;Set an environment variable for the container startup. cube.env:<var>=<value>"

if [ -z "$1" ]; then
    usage_global
    exit
fi

# take the entire command into an array
raw_command=($@)

force=""
peer=t
non_dashed=""
out_dir="./"

# this corresponds to the lxc.id_map items within the container's config file
DEFAULT_SUBUID=800000

while [ $# -gt 0 ]; do
    case "$1" in
	-v) verbose=t
            ;;
	--dryrun)
	    dryrun=t
	    vebose=t
	    ;;
	--clean)
	    clean=t
	    ;;
        --peer)
	    peer=t
	    nested=
	    ;;
	--nested)
	    nested=t
	    peer=
	    ;;
	--parent)
	    parent=${2}
	    shift
	    ;;
	--prepend)
	    # used with set
	    prepend=t
	    ;;
	--append)
	    # used with set
	    append=t
	    ;;
	--name)
	    container_name_temp=${2}
	    shift
	    ;;
	-u)
		# This is an unprivileged container. We need to config subuid/subgid.
		if [ "${2}" -eq "${2}" ] 2>/dev/null; then
			if [ "${2}" -lt 100000 ] 2>/dev/null; then
				echo "Error: -u requires a subuid number no less than 100000"
				exit 1
			fi
			subuid="${2}"
			shift
		else
			subuid="${DEFAULT_SUBUID}"
		fi
		;;
	-F)
	    force=-F
	    ;;
        --n|-n)
	    container_name=${2}
	    shift
	    ;;
        --t|-t)
	    container_type=${2}
	    shift
	    ;;
        --o|-o)
	    out_dir=${2}
	    shift
	    ;;
        --runonce|-r)
	    runonce=t
	    ;;
	-h|--help)
	    cmd_help=${2}
	    if [ -z "${cmd_help}" ]; then
		usage_global
	    else
		f=$(type -t usage_${cmd_help})
		if [ "${f}" = "function" ]; then
		    usage_${cmd_help}
		else
		    echo "No help information found for command ${cmd_help}"
		fi
	    fi
	    exit
	    ;;
	--*)
	    # if the next argument is dashed, we just add $1 to our collection
	    # of dashed arguments. If $2 is NOT dashed, we assume it is a parameter
	    # to the --dashed option, and we grab it as well. Don't try and mix
	    # dashed and non-dashed, since we'll grab them!
	    case $2 in
		--*)
		    dashed="${dashed} $1"
		    ;;
		*)
		    # sneak a : in between, so we can split it later
		    dashed="${dashed} $1:$2"
		    shift
		    ;;
	    esac
	    ;;
        *) non_dashed="${non_dashed} $1"
            ;;
    esac
    shift
done

determine_outdir()
{
    # if outdir wasn't passed on the command line, but a container name
    # was passed, then we should check to see if the container is available
    # and change the out_dir to where it is stored. This allows things
    # like: 'cube-cfg -n cube-server get autostart' to work without passing
    # the out_dir explicitly
    if [ "${out_dir}" == "./" ]; then
	if [ -n "${container_name}" ]; then
	    if [ -d "/opt/container/${container_name}" ]; then
		# but only if we have a config.json, should this actually become
		# our outdir
		if [ -f "/opt/container/${container_name}/config.json" ]; then
		    out_dir="/opt/container/${container_name}"
		fi
	    fi
	fi
    fi

    # likewise. If no container name is set, but an outdir is "./", then
    # we take a container_name as the last part of the directory
    if [ -z "${container_name}" ] && [ "${out_dir}" = "./" ]; then
	container_name=$(basename $(pwd))
	if [ ! -d "/opt/container/${container_name}" ]; then
	    container_name=""
	fi
    fi
}

# returns 1 if we are container, 0 otherwise
function am_i_a_container()
{
    local virt_bin=$(which systemd-detect-virt 2> /dev/null)

    # if we can't run detection, just say we aren't a container
    if [ -z "${virt_bin}" ]; then
	return 0
    fi

    local virt=$(systemd-detect-virt)
    case $virt in
	lxc*)
	    return 1
	    ;;
	container*)
	    return 1
	    ;;
	docker*)
	    return 1
	    ;;
    esac

    return 0
}

determine_outdir

# only dom0 has visibility to essential
if [ -d "/var/lib/cube/essential" ]; then
    we_are_dom0=t
fi
am_i_a_container
if [ $? -eq 1 ]; then
    we_are_a_container=t
fi


## Note: this routine is also in cube-ctl, so if you change this,
##       change it there. Rather than do a .inc for the scripts,
##       they are being kept standalone
graft_binaries_to_essential()
{
    local binaries=$@

    if [ -z "${we_are_a_container}" ]; then
	return
    fi
    if [ -z "${we_are_dom0}" ]; then
	return
    fi

    if [ ! -d "/var/lib/cube/essential/sbin/" ]; then
	mkdir -p "/var/lib/cube/essential/sbin/"
    fi

    for b in ${binaries}; do
	if [ ! -e "/var/lib/cube/essential/sbin/${b}" ]; then
	    bin="${b}"
	    if [ ! -f "${bin}" ]; then
		bin=$(which ${b})
	    fi
	    if [ ! -f "${bin}" ]; then
		echo "ERROR: binary ${b} not found"
		continue
	    fi
	    # Copy it in archive mode to include extend attributes used for IMA
	    cp -af ${bin} /var/lib/cube/essential/sbin/
	fi
    done
}

# returns 1 if we are container, 0 otherwise
function am_i_a_container()
{
    local virt_bin=$(which systemd-detect-virt)

    # if we can't run detection, just say we aren't a container
    if [ -z "${virt_bin}" ]; then
	return 0
    fi

    local virt=`systemd-detect-virt`
    case $virt in
	lxc*)
	    return 1
	    ;;
	container*)
	    return 1
	    ;;
	docker*)
	    return 1
	    ;;
    esac

    return 0
}

am_i_a_container
if [ $? -eq 1 ]; then
    we_are_a_container=t
fi

# make an array from whatever was non-dashed
cmd_options_non_dashed=(${non_dashed})

if [ -z "${cmd}" ]; then
    # the first element is the command
    cmd=${cmd_options_non_dashed[0]}
fi

check_required()
{
    if [ ! -e "${1}" ]; then
	echo "[ERROR]: required command ${1} not found, exiting"
	exit 1
    fi
}

check_if_present()
{
    if [ -e "${1}" ]; then
	return 0
    fi
    return 1
}

#
# arg1: type of artifacts to clean. if not passed, all will be
#       cleaned
#
clean_config_artifacts()
{
    local type=$1

    # we exit with 1 if we deleted something, otherwise, 0
    if [ -n "${runonce}" ]; then
	ls *.runonce  >/dev/null 2>&1
	if [ $? -ne 0 ]; then
	    ls .*.runonce  >/dev/null 2>&1
	    if [ $? -eq 0 ]; then
		runonce_found=t
	    fi
	else
	    runonce_found=t
	fi

	# we just delete all runonce settings and exit
	rm -f ${out_dir}/*.runonce ${out_dir}/.*.runonce

	if [ -n "${runonce_found}" ]; then
	    exit 1
	fi
	exit 0
    fi

    if [ -z "${type}" ]; then
	type="all"
    fi

    if [ "${type}" = "mount" ] || [ "${type}" = "all" ]; then
	rm -f ${out_dir}/.cube.mount
	rm -f ${out_dir}/.cube.mount.bind
    fi

    if [ "${type}" = "device" ] || [ "${type}" = "all" ]; then
	rm -f ${out_dir}/.cube.device ${out_dir}/.cube.device.network ${out_dir}/.cube.device.vt
    fi

    if [ "${type}" = "hooks" ] || [ "${type}" = "all" ]; then
	rm -f ${out_dir}/.cube.hooks.prestart ${out_dir}/.cube.hooks.poststart ${out_dir}/.cube.hooks.poststop
    fi
}

#
# arg1: name of the container
# arg2: type of artifacts to show. 'all' will be assumed if nothing is passed
#
show_config_artifacts()
{
    local container_name=$1
    local type=$2

    if [ -z "${type}" ]; then
	type="all"
    fi

    if [ "${type}" = "mount" ] || [ "${type}" = "all" ]; then
	echo "mounts:"
	echo "-------"
	if [ -e "${out_dir}/.cube.mount" ]; then
	    for b in $(cat ${out_dir}/.cube.mount); do
		echo "mount: $b"
	    done
	fi
	if [ -e "${out_dir}/.cube.mount.bind" ]; then
	    for b in $(cat ${out_dir}/.cube.mount.bind); do
		echo "mount (bind): $b"
	    done
	fi
    fi

    if [ "${type}" = "device" ] || [ "${type}" = "all" ]; then
	echo ""
	echo "devices:"
	echo "--------"
	if [ -e "${out_dir}/.cube.device" ]; then
	    for b in $(cat ${out_dir}/.cube.device); do
		echo "device: $b"
	    done
	fi
	if [ -e "${out_dir}/.cube.device.network" ]; then
	    for b in $(cat ${out_dir}/.cube.device.network); do
		echo "network device: $b"
	    done
	fi
	if [ -e "${out_dir}/.cube.device.vt" ]; then
	    for b in $(cat ${out_dir}/.cube.device.vt); do
		echo "VT device: $b"
	    done
	fi
    fi

    if [ "${type}" = "hooks" ] || [ "${type}" = "all" ]; then
	echo ""
	echo "hooks:"
	echo "------"
	if [ -e "${out_dir}/.cube.hooks.prestart" ]; then
OLDIFS=$IFS
IFS='
'
	    for b in $(cat ${out_dir}/.cube.hooks.prestart); do
		echo "hook (pre start) : $b" | sed 's/##space##//g'
	    done
	fi
	if [ -e "${out_dir}/.cube.hooks.poststart" ]; then
	    for b in $(cat ${out_dir}/.cube.hooks.poststart); do
		echo "hook (post start) : $b" | sed 's/##space##//g'
	    done
	fi
	if [ -e "${out_dir}/.cube.hooks.poststop" ]; then
	    for b in $(cat ${out_dir}/.cube.hooks.poststop); do
		echo "hook (post stop): $b" | sed 's/##space##//g'
	    done
	fi
IFS=$OLDIFS
    fi

    if [ -e "${out_dir}/cube.attributes" ]; then
	echo ""
	echo "attributes:"
	echo "-----------"
	cat "${out_dir}/cube.attributes"
	echo ""
    fi

    if [ -e "${out_dir}/cube.network.stack" ]; then
	echo ""
	echo "network rules:"
	echo "--------------"
OLDIFS=$IFS
IFS='
'
        for r in $(cat ${out_dir}/cube.network.stack); do
            echo "$r"
	done
IFS=$OLDIFS
    fi

    echo ""
    for K in "${!CONFIG_MAP[@]}"; do
	var_type=$(echo "${CONFIG_MAP[$K]}" | cut -d';' -f3)
	if [ "${var_type}" = "multi" ]; then
	    echo "$K"
	    echo "------"
	    vals=$(cube-cfg -n ${container_name} get ${K})
OLDIFS=$IFS
IFS='
'
	    for v in $vals; do
		echo -n "${K}: "
		echo ${v}
	    done
IFS=$OLDIFS
	fi
    done

    echo ""
    output=$(mktemp)
    echo "option:setting" > ${output}
    echo "------:-------" >> ${output}
    for K in "${!CONFIG_MAP[@]}"; do

	var_type=$(echo "${CONFIG_MAP[$K]}" | cut -d';' -f3)
	if [ "${var_type}" != "multi" ]; then
	    echo -n "${K}: " >> ${output}
	    value=$(cube-cfg -n ${container_name} get ${K})
	    if [ -n "${value}" ]; then
		echo "${value}" >> ${output}
	    else
		echo "not set" >> ${output}
	    fi
	fi
    done
    cat ${output} | column -t -s:
    rm ${output}
}

#
# arg1: container name
#
# output: config.json in the current directory
#
generate_base_config()
{
    local container_name=$1

    # if runonce is set, check for any runonce values, if found, we do
    # a regen. Otherwise, we do not
    if [ -n "${runonce}" ]; then
	ls *.runonce  >/dev/null 2>&1
	if [ $? -ne 0 ]; then
	    ls .*.runonce  >/dev/null 2>&1
	    if [ $? -eq 0 ]; then
		runonce_found=t
	    fi
	else
	    runonce_found=t
	fi
	if [ -n "${runonce_found}" ]; then
	    var_extension=".runonce"
	    get_flag="-r"

	    runonce_settings=".cube.mount.bind .cube.device.vt cube.app \
                              .cube.hooks.prestart .cube.hooks.poststart \
                              .cube.hooks.poststop cube.env cube.console.mgr"

	    # if a setting doesn't have a .runonce value, we make one for it
	    # this could go into a utility routine to copy, or clean all the
	    # settings
	    for v in ${runonce_settings}; do
		if [ -e "${v}" ]; then
		    if [ ! -e "${v}.runonce" ]; then
			cp ${v} ${v}.runonce
		    fi
		fi
	    done
	else
	    exit 0
	fi
    fi

    if [ -e ".cube.mount.bind" ]; then
	for d in $(cat .cube.mount.bind${var_extension}); do
	    mount_args="${mount_args} --mount-bind $d"
	done
    fi

    # temp. once the oci-runtime-tool is updated, we can pass devices
    #       directly. for now this is a bind mount.
    if [ -e ".cube.device.vt" ]; then
	for d in $(cat .cube.device.vt${var_extension}); do
	    mount_args="${mount_args} --mount-bind ${d}"
	done
    fi

    # TODO: these can also be cube-cfg values, but right now are
    #       restricted for compatibility reasons
    capabilities="--process-cap-add CAP_KILL \
		  --process-cap-add CAP_LINUX_IMMUTABLE \
                  --process-cap-add CAP_SYS_RAWIO \
                  --process-cap-add CAP_SYS_ADMIN \
		  --process-cap-add CAP_SYS_MODULE \
                  --process-cap-add CAP_SYS_RESOURCE \
                  --process-cap-add CAP_NET_ADMIN \
                  --process-cap-add CAP_NET_BROADCAST \
                  --process-cap-add CAP_SYSLOG \
                  --process-cap-add CAP_SYS_TTY_CONFIG"

    app=$(cat cube.app${var_extension})
    app_args=""
    for a in ${app}; do
	app_args="$app_args --args $a"
    done

    OLDIFS=$IFS
IFS='
'
    if [ -e ".cube.hooks.prestart" ]; then
	for hook in $(cat .cube.hooks.prestart${var_extension}); do
	    cmd=$(echo ${hook} | cut -d' ' -f1)
	    count=$(echo ${hook} | wc -w)
	    if [ $count -gt 1 ]; then
		# the oci generation tool will take : separated items as arguments
		# to the main executable. So we replace our spaces with : to get
		# everything into the config.json
		args=$(echo ${hook} | sed 's/ /:/g')
		hooks="${hooks} --hooks-prestart ${cmd}:${args}"
	    else
		hooks="${hooks} --hooks-prestart ${cmd}"
	    fi
	done
    fi
    if [ -e ".cube.hooks.poststart" ]; then
	for hook in $(cat .cube.hooks.poststart${var_extension}); do
	    cmd=$(echo ${hook} | cut -d' ' -f1)
	    count=$(echo ${hook} | wc -w)
	    if [ $count -gt 1 ]; then
		# the oci generation tool will take : separated items as arguments
		# to the main executable. So we replace our spaces with : to get
		# everything into the config.json
		args=$(echo ${hook} | sed 's/ /:/g')
		hooks="${hooks} --hooks-poststart ${cmd}:${args}"
	    else
		hooks="${hooks} --hooks-poststart ${cmd}"
	    fi
	done
    fi
    if [ -e ".cube.hooks.poststop" ]; then
	for hook in $(cat .cube.hooks.poststop${var_extension}); do
	    cmd=$(echo ${hook} | cut -d' ' -f1)
	    count=$(echo ${hook} | wc -w)
	    if [ $count -gt 1 ]; then
		# the oci generation tool will take : separated items as arguments
		# to the main executable. So we replace our spaces with : to get
		# everything into the config.json
		args=$(echo ${hook} | sed 's/ /:/g')
		hooks="${hooks} --hooks-poststop ${cmd}:${args}"
	    else
		hooks="${hooks} --hooks-poststop ${cmd}"
	    fi
	done
    fi

    if [ -e "cube.env" ]; then
	for e in $(cat cube.env${var_extension}); do
	    e_nspc=$(echo ${e} | sed 's/ /#/g')
	    env_args="${env_args} --env ${e_nspc}"
	done
    fi
    IFS=$OLDIFS

    console_mgr=$(cube-cfg ${get_flag} cube.console.mgr:)
    if [ "${console_mgr}" = "tty" ]; then
	tty_flag="--process-tty"
    fi

    ## TODO: if there's no oci-runtime-tool, then we should capture a
    ##       a default config.json and modify it on the fly
    oci-runtime-tool generate \
	             ${tty_flag} \
		     ${env_args} \
	             ${hooks} \
		     ${app_args} \
                     --linux-cgroups-path=/runc/${container_name} \
                     --linux-seccomp-remove-all \
                     --hostname=${container_name} \
		     --env container=docker \
                     ${capabilities} \
                     ${mount_args} \
                     > config.json.tmp
    if [ ! -s config.json.tmp ] ; then
	echo "ERROR: config.jason generation failed"
	exit 1
    fi

    # fixup: disable seccomp completely by making it a section that is ignored
    sed -i 's/\"seccomp\"/\"seccomp-ignore\"/g' config.json.tmp
    # fixup: "devices" must be available for mods
    sed -i 's/\"allow\": false,/\"allow\": true,/g' config.json.tmp
    # fixup: /sys/ needs to be read-write
    sed -i 's/\"ro\"/\"rw\"/g' config.json.tmp

    # fixup: hooks have been encoded with ##space## to get the arguments properly
    #        into the json for shell script hooks. We need to change these back to
    #        real spaces.
    sed -i 's/\#\#space\#\#/ /g' config.json.tmp    

    mv config.json.tmp config.json

    # by default, we assume runc will manage the container, this can
    # be changed later.
    if [ ! -e cube.container.mgr ]; then
	echo "runc" > cube.container.mgr
    fi

    if [ "${console_mgr}" = "tty" ] || [ "${console_mgr}" = "screen-tty" ] || [ "${console_mgr}" = "interactive" ] ; then
	jq -r  '.process.terminal = true' config.json > config.json.terminal
    else
	jq -r  '.process.terminal = false' config.json > config.json.terminal
    fi
    mv config.json.terminal config.json

    # Generate an oci.cmd that can be used to launch this container via runc
cat > oci.cmd <<EOF
#!/bin/bash
args=\$1
if [ -d /sys/fs/cgroup/unified ]; then
    # This creates a new cgroup for the container we are launching. runc is pointed at it
    # via its json config and will reparent to that new cgroup and escape systemd tracking
    mkdir -p /sys/fs/cgroup/unified/runc/${container_name}
    echo \$\$ > /sys/fs/cgroup/unified/runc/${container_name}/cgroup.procs
fi
if [ -e "/opt/container/${container_name}/cube.console.mgr.runonce" ]; then
    console_mgr=\$(cat /opt/container/${container_name}/cube.console.mgr.runonce)
else
    console_mgr=\$(cat /opt/container/${container_name}/cube.console.mgr)
fi
if [ "\${console_mgr}" = "tty" ] || [ "\${console_mgr}" = "screen-tty" ]; then
    if [ "\${args}" != "attach" ] ; then
	rm -f /var/lib/cube/${container_name}/dtach-sock \
	  /var/lib/cube/${container_name}/runc-sock \
	  /var/lib/cube/${container_name}/pty-console
	/usr/bin/dtach -n /var/lib/cube/${container_name}/dtach-sock -W 120 \
	  -p /var/lib/cube/${container_name}/pty-console -c -C -E \
	  -q /var/lib/cube/${container_name}/runc-sock < /dev/null > /dev/null 2> /dev/null
    fi
    runc_console="--console-socket=/var/lib/cube/$container_name/runc-sock"
else
    rm -f /var/lib/cube/${container_name}/pty-console
    touch /var/lib/cube/${container_name}/pty-console
fi
if [ "\${args}" = "consoleonly" ] ; then
    exit 0
fi
mgr=\$(cat /opt/container/${container_name}/cube.container.mgr)
if [ "\${args}" = "foreground" ] ; then
     \${mgr} run --bundle /opt/container/${container_name} ${container_name}
else
     /usr/sbin/daemonize-sigusr1-wait \${mgr} create --bundle /opt/container/${container_name} \${runc_console} ${container_name}
    if [ "\${console_mgr}" = "screen-tty" ] || [ "\${args}" = "debug" ]; then
	/usr/bin/screen -ls console > /dev/null && /usr/bin/screen -S console -x -X \
	  screen -t ${container_name} /var/lib/cube/${container_name}/pty-console
    fi
    \${mgr} start ${container_name}
fi
EOF

    chmod +x oci.cmd
}

#
# arg1: container name
#
convert_base_config_to_cube()
{
    local container_name=$1

    rm -f pflask.config

    # any mounts ?
    for mount in $(jq -r '.mounts | map("\(.type):\(.source):\(.destination)") | .[]' config.json); do
	# we only care about bind mounts at the moment
	echo "$mount" | grep -q bind
	if [ $? -eq 0 ]; then
	    echo ${mount} >> pflask.config
	    pflask_args="${pflask_args} --mount ${mount}"
	fi
    done

    # any devices.
    # TODO: these need to come from the oci spec, like the mounts, but right
    #       now the OCI tool doesn't seem to handle it
    if [ -e ".cube.device.network" ]; then
	netdevs=$(cat .cube.device.network)
	for n in ${netdevs}; do
	    pflask_args="${pflask_args} --netif=${n}"
	done
	echo "${netdevs}" >> pflask.config
    fi

    # hooks ?
    poststart_hooks=$(jq -r '.hooks.poststart' config.json)
    if [ "${poststart_hooks}" != "null" ]; then
	poststart_hooks=$(jq -r '.hooks.poststart | map("\(.path) \(.args)") | . []' config.json)
    fi
    poststop_hooks=$(jq -r '.hooks.poststop' config.json)
    if [ "${poststop_hooks}" != "null" ]; then
	poststopt_hooks=$(jq -r '.hooks.poststop| map("\(.path) \(.args)") | . []' config.json)
    fi

    # what is the executable we are running ?
    app=$(jq -r  '.process.args | .[]' config.json)

    # and the root directory (to be appended to the current working dir)
    rootfs=$(jq -r  '.root.path'  config.json)
    rootfs="/opt/container/${container_name}/${rootfs}"

    # TODO. These could chnage to prestart hooks, post start hooks could
    #       be scripts called after launch, but for now this is consistent
    #       with our OCI hook calls.
    if [ -n "${poststart_hooks}" ]; then
	OLDIFS=$IFS
	hooks=""
IFS='
'
	for h in ${poststart_hooks}; do
	    # drop any "null" strings, since that means "no args"
	    h=$(echo "${h}" | sed 's/null//g')

	    # args are in an array i.e. ["sh","-c","/usr/libexec/oci/hooks.d/oci-network down $(cat)"]
	    # so we test for the brackets and replace the hook with the output
	    echo "${h}" | grep -q "\["
	    if [ $? -eq 0 ]; then
		zztop=$(echo ${h} | sed -e 's/.*\[\(.*\)\]/\1/')
		if [ -n "${zztop}" ]; then
		    # drop quotes and commas
		    zztop=$(echo ${zztop} | tr -d '"')
		    zztop=$(echo ${zztop} | sed 's/,/ /g')
		    h=${zztop}
		fi
	    fi

	    # was it a script call ? if it was, we need to put quotes back
	    # arond the -c "<command>"
	    echo ${h} | grep -q "sh -c"
	    if [ $? -eq 0 ]; then
		h=$(echo ${h} | sed "s/-c /-c '/")
		h=$(echo ${h} | sed "s/$/ %s'/")
	    fi

	    hooks="${hooks} --hook=\"${h}\""
	done
	IFS=$OLDIFS
    fi

    pflask_args="${pflask_args}	-p ${container_name} --uncontain -d --escape-char=255 --root ${rootfs} ${hooks}"

    echo "#!/bin/bash" > pflask.cmd
    echo "date > /tmp/pflask-hook.log" >> pflask.cmd

    if [ -e "cube.console.mgr" ]; then
	grep -q "screen-tty" cube.console.mgr
	if [ $? -eq 0 ]; then
	    # The %d in the pflask command line is a sentinel value to trigger
	    # pflask to attach to it's pid (through the console command). This
	    # only works in background mode.
	    echo "export CONSOLE_CMD=\"[ -d /tmp/screens ] && /usr/bin/screen -S console -x -X screen -t ${container_name} /bin/pflask -a %d -E 255\"" >> pflask.cmd
	fi
    fi
    echo "pflask ${pflask_args} -- ${app}" >> pflask.cmd

    # Note: This is intentially zero'd, so that the if check will not match
    #       We are currently using poststart internally to pflask, but they
    #       may shift to prestart, and this code would then be re-activated as
    #       poststart
    poststart_hooks=""
    if [ -n "${poststart_hooks}" ]; then
	OLDIFS=$IFS
IFS='
'
	for h in ${poststart_hooks}; do
	    # drop any "null" strings, since that means "no args"
	    h=$(echo "${h}" | sed 's/null//g')

	    # args are in an array i.e. ["sh","-c","/usr/libexec/oci/hooks.d/oci-network down $(cat)"]
	    # so we test for the brackets and replace the hook with the output
	    echo "${h}" | grep -q "\["
	    if [ $? -eq 0 ]; then
		zztop=$(echo ${h} | sed -e 's/.*\[\(.*\)\]/\1/')
		if [ -n "${zztop}" ]; then
		    # drop quotes and commas
		    zztop=$(echo ${zztop} | tr -d '"')
		    zztop=$(echo ${zztop} | sed 's/,/ /g')
		    h=${zztop}
		fi
	    fi

	    # was it a script call ? if it was, we need to put quotes back
	    # arond the -c "<command>"
	    echo ${h} | grep -q "sh -c"
	    if [ $? -eq 0 ]; then
		h=$(echo ${h} | sed "s/-c /-c '/")
		h=$(echo ${h} | sed "s/$/'/")
	    fi

	    # put the conditioned hook into the pflask command, with a retry loop (since these can have timing issues)
	    echo "count=0" >> pflask.cmd
	    echo "while [ \$count -lt 10 ]; do" >> pflask.cmd
	    echo "    ${h}" >> pflask.cmd
	    echo "    if [ \$? -ne 0 ]; then" >> pflask.cmd
	    echo "        echo \"Hook fail [\"${h}\"] (\$count)!\" >> /tmp/pflask-hook.log" >> pflask.cmd
	    echo "        count=\`expr \$count + 1\`" >> pflask.cmd
	    echo "        sleep 0.5" >> pflask.cmd
	    echo "    else" >> pflask.cmd
	    echo "        echo \"Hook success [\"${h}\"] (\$count)\" >> /tmp/pflask-hook.log" >> pflask.cmd
	    echo "        count=10" >> pflask.cmd
	    echo "    fi" >> pflask.cmd
	    echo "done" >> pflask.cmd
	done
	IFS=$OLDIFS
    fi

    chmod +x pflask.cmd
    echo "pflask" > cube.container.mgr
}

etcd_fetch()
{
    local key=$1

    local key_dir=$(dirname ${key})
    local key_name=$(basename ${key})
    local etcdctl=etcdctl

    if [ -n "${dryrun}" ]; then
	etcdctl="echo etcdctl"
    fi

    if [ -n "${verbose}" ]; then
	echo "[INFO]: fetching ${key}"
    fi

    eval ${etcdctl} get ${key_dir}/${key_name}
    if [ $? -ne 0 ]; then
	echo "ERROR: Could not inject ${key} to etcd data store"
	return
    fi
}

# inputs:
#    1: file to check
#    2: value we are looking for
#
# return:
#    0: not set
#    1: is set
check_isset() {
    file_to_check=$1
    shift
    value_to_check=$@

    if [ -e ${file_to_check} ]; then
	cat ${file_to_check} | grep -q -w "${value_to_check}"
	if [ $? -eq 0 ]; then
	    return 1
	fi
    fi

    return 0
}

app_hook() {
    old_val=$1
    new_val=$2
    db_var=$3

    if [ -n "${container_name}" ]; then
	container_name_flag="-n ${container_name}"
    fi
    if [ "${old_val}" != "${new_val}" ]; then
	# we have a delta
	echo $old_val | grep -q sbin/init
	if [ $? -eq 0 ]; then
	    # we are switching from a system container to something else, drop the systemd hooks
	    ${mydir}/cube-cfg ${container_name_flag} hook -prestart:/usr/libexec/oci/hooks.d/oci-systemd-hook
	    ${mydir}/cube-cfg ${container_name_flag} hook -poststop:/usr/libexec/oci/hooks.d/oci-systemd-hook
	fi
	echo $new_val | grep -q sbin/init
	if [ $? -eq 0 ]; then
	    # we are switching to a system container to something else, addd the systemd hooks
	    ${mydir}/cube-cfg ${container_name_flag} hook prestart:/usr/libexec/oci/hooks.d/oci-systemd-hook
	    ${mydir}/cube-cfg ${container_name_flag} hook poststop:/usr/libexec/oci/hooks.d/oci-systemd-hook
	fi
    fi
}

mgr_hook() {
    old_val=$1
    new_val=$2
    db_var=$3

    if [ -n "${container_name}" ]; then
	container_name_flag="-n ${container_name}"
    fi
    if [ "${old_val}" != "${new_val}" ]; then
	# we have a delta
	echo $new_val | grep -q runv
	if [ $? -eq 0 ]; then
	    # we are switching to a runv container. graft the binaries
	    graft_binaries_to_essential runv
	    ${mydir}/cube-cfg set ${container_name_flag} cube.container.mgr:/var/lib/cube/essential/sbin/runv
	fi
    fi
}

etcd_inject()
{
    local key=$1
    local value=$2

    local key_dir=$(dirname ${key})
    local key_name=$(basename ${key})
    local etcdctl=etcdctl

    redir="> /dev/null 2>&1"
    if [ -n "${dryrun}" ]; then
	etcdctl="echo etcdctl"
	redir=""
    fi

    if [ -n "${verbose}" ]; then
	echo "[INFO]: injecting ${key}:${value}"
    fi

    if [ -n "${value}" ]; then
	eval ${etcdctl} set ${key_dir}/${key_name} ${value} $redir
	if [ $? -ne 0 ]; then
	    echo "ERROR: Could not inject ${key} to etcd data store"
	    return
	fi
    else
	# value isn't set, we are clearing the key
	eval ${etcdctl} rm -r ${key} ${value} $redir
    fi
}

set_authorization()
{
    local auth_type=$1
    local auth_user=$2
    local auth_password=$3
    local container_name=$4
    local auth_file="auths.json"
    local auth_dir="~/.overc/"

    eval auth_dir=${auth_dir}
    if [ -n "${container_name}" ]; then
	auth_dir="/opt/container/${container_name}"
    fi
    if [ "${auth_type}" == "docker" ]; then
	if [ ! -d "${auth_dir}" ]; then
	    mkdir -p "${auth_dir}"
	fi

	if [ ! -f "${auth_dir}/${auth_file}" ]; then
cat > ${auth_dir}/${auth_file} <<EOF
	{
	    "auths": {
		"https://index.docker.io/v1/": {
		    "auth": ""
		}
	    },
	    "HttpHeaders": {
		"User-Agent": "Docker-Client/unknown-version (linux)"
	    }
	}
EOF
	fi

        auth_string=$(echo "${auth_user}:${auth_password}" | base64)
	auth_string="${auth_string}="

	jq ".[\"auths\"][\"https://index.docker.io/v1/\"][\"auth\"] = \"${auth_string}\"" ${auth_dir}/${auth_file} > ${auth_dir}/${auth_file}.new 
	mv ${auth_dir}/${auth_file}.new ${auth_dir}/${auth_file}
    fi
}

get_authorization()
{
    local auth_type=$1
    local container_name=$2
    local auth_file="auths.json"
    local auth_dir="~/.overc/"

    eval auth_dir=${auth_dir}
    if [ -n "${container_name}" ]; then
	auth_dir="/opt/container/${container_name}"
    fi
    if [ "${auth_type}" == "docker" ]; then
	if [ -f "${auth_dir}/${auth_file}" ]; then
	    jq '.["auths"]["https://index.docker.io/v1/"]["auth"]' ${auth_dir}/${auth_file}
	fi
    fi
}

case "${cmd}" in
    clean)
	clean_config_artifacts
	;;
    auth)
	auth_string=${cmd_options_non_dashed[1]}

	echo "${auth_string}" | grep -q ":"
	if [ $? -eq 0 ]; then
	    # if there were any colons, we are setting the authorization
	    auth_type=$(echo ${auth_string} | cut -f1 -d:)
	    auth_user=$(echo ${auth_string} | cut -f2 -d:)
	    auth_password=$(echo ${auth_string} | cut -f3 -d:)

	    if [ -z "${auth_user}" ]; then
		echo -n "${auth_type} user: "
		read auth_user
	    fi
	    if [ -z "${auth_password}" ]; then

		# fancy reading and echo'ing of * for each char
		tty -s
		if [ $? -eq 0 ]; then
		    echo -n "${auth_type} password: "
		fi
		while IFS= read -p "$prompt" -r -s -n 1 char
		do
		    # Enter - accept password
		    if [[ $char == $'\0' ]] ; then
			break
		    fi
		    # Backspace
		    if [[ $char == $'\177' ]] ; then
			prompt=$'\b \b'
			password="${password%?}"
		    else
			prompt='*'
			password+="$char"
		    fi
		done
		auth_password=${password}
		tty -s
		if [ $? -eq 0 ]; then
		    echo
		fi
	    fi

	    set_authorization ${auth_type} ${auth_user} ${auth_password} ${container_name}
	else
	    # no colons, return the auth for the container type
	    get_authorization ${auth_string} ${container_name}
	fi
	;;
    show)
	cn=${cmd_options_non_dashed[1]}
	if [ -n "${cn}" ]; then
	    container_name="${cn}"
	fi
	if [ -z "${container_name}" ]; then
	    echo "[ERROR]: a container name must be provided"
	    usage_show
	    exit 1
	fi
	determine_outdir
	show_config_artifacts ${container_name}
	;;
    gen)
	name_temp=${cmd_options_non_dashed[1]}
	container_name=$(echo ${name_temp} | cut -f1 -d:)
	container_type=$(echo ${name_temp} | cut -f2 -d:)

	if [ -z "${container_name}" ]; then
	    usage_gen
	    exit 1
	fi

	determine_outdir

	if [ "${container_name}" == "${container_type}" ]; then
	    container_type="oci"
	fi

	(
	    cd ${out_dir}
	    generate_base_config ${container_name}
	)

	if [ "${container_type}" == "cube" ]; then
	    convert_base_config_to_cube ${container_name}
	fi
	;;
    mount)
	name_temp=${cmd_options_non_dashed[1]}

	if [ -n "${clean}" ]; then
	    clean_config_artifacts mount
	fi

	colons=$(echo ${name_temp} | sed -e 's/\(.\)/\1\n/g' | grep : | wc -l)
	if [ ${colons} -eq 2 ]; then
	    # we have <type>:<source>:<dest>
	    type=$(echo ${name_temp} | cut -f1 -d:)
	    source=$(echo ${name_temp} | cut -f2 -d:)
	    dest=$(echo ${name_temp} | cut -f3 -d:)

	    outfile="${out_dir}/.cube.mount.bind"
	    op_test="${type}"
	elif [ ${colons} -eq 1 ]; then
	    # we have <source>:<dest>
	    type="standard"
	    source=$(echo ${name_temp} | cut -f1 -d:)
	    dest=$(echo ${name_temp} | cut -f2 -d:)

	    if [ "${source}" == "bind" ]; then
		# this was really bind mount missing an argument
		echo "[ERROR]: bind mounts require a source and destination argument"
		exit 1
	    fi

	    outfile="${out_dir}/.cube.mount"
	    op_test="${source}"
	else
	    # we dump the mounts
	    type=$(echo ${name_temp} | cut -f1 -d:)
	    if [ "${type}" == "bind" ]; then
		if [ -e "${out_dir}/.cube.mount.bind" ]; then
		    cat "${out_dir}/.cube.mount.bind"
		fi
	    else
		if [ -e "${out_dir}/.cube.mount" ]; then
		    cat "${out_dir}/.cube.mount"
		fi
	    fi
	    exit 0
	fi

	if [ -z "${source}" ]; then
	    echo "[ERROR]: no source mount provided"
	    usage_mount
	    exit 1
	fi
	if [ -z "${dest}" ]; then
	    echo "[ERROR]: no dest mount provided"
	    usage_mount
	    exit 1
	fi

	if [ -n "${op_test}" ]; then
	    # was there a + or - as part of the container_a ?
	    case ${op_test} in
		-*)
		    op_test=$(echo ${op_test} | sed 's/^-//')
		    op="-"
		    ;;
		+*)
		    op_test=$(echo ${op_test} | sed 's/^+//')
		    op="+"
		    ;;
		*)
		    op="+"
		    ;;
	    esac
	fi

	if [ "${type}" == "standard" ]; then
	    source="${op_test}"
	else
	    type="${op_test}"
	fi

	if [ "${op}" == "+" ]; then
	    if [ -n "${verbose}" ]; then
		echo "[INFO]: adding mount ${source} -> ${dest}"
	    fi

	    check_isset ${outfile} "${source}:${dest}"
	    if [ $? -eq 0 ]; then
		echo "${source}:${dest}" >> ${outfile}
	    fi
	else
	    if [ -n "${verbose}" ]; then
		echo "[INFO]: removing mount ${source} -> ${dest}"
	    fi
	    if [ -f "${outfile}" ]; then
		sed "\|^${source}:${dest}$|d" -i ${outfile}
	    fi
	fi
	;;
    id)
	if [ -e /etc/machine-id ]; then
	    cat /etc/machine-id
	else
	    echo ""
	fi
	;;
    link)
	container_a=${cmd_options_non_dashed[1]}
	container_b=${cmd_options_non_dashed[2]}

	if [ -z "${container_a}" ] || [ -z "${container_b}" ]; then
	    usage_link
	    exit 1
	fi

	from=${cmd_options_non_dashed[3]}
	from_ip=${cmd_options_non_dashed[4]}

	container_a_port=$(echo ${container_a} | cut -f2 -d:)
	container_b_port=$(echo ${container_b} | cut -f2 -d:)
	container_a=$(echo ${container_a} | cut -f1 -d:)
	container_b=$(echo ${container_b} | cut -f1 -d:)

	container_name=${container_a}
	determine_outdir

	if [ -n "${container_a}" ]; then
	    # was there a + or - as part of the container_a ?
	    case ${container_a} in
		-*)
		    container_a=$(echo ${container_a} | sed 's/^-//')
		    op="-"
		    ;;
		+*)
		    container_a=$(echo ${container_a} | sed 's/^+//')
		    op="+"
		    ;;
		*)
		    container_a=${container_a}
		    op="+"
		    ;;
	    esac
	fi

	if [ -n "${from}" ]; then
	    if [ -z "${from_ip}" ]; then
		echo "[ERROR]: 'from' requires a source IP address"
		usage_link
		exit 1
	    fi

	    if [ "${from_ip}" == "localhost" ]; then
		from_ip="127.0.0.1"
		localhost=t
	    else
		source_args="-s ${from_ip}"
	    fi
	fi

	if [ -n "${localhost}" ]; then
	    cmd_1="sysctl -w net.ipv4.conf.all.route_localnet=1"
	    cmd_2="iptables -A OUTPUT -t nat -p tcp --dport ${container_a_port} -j DNAT --to \${${container_b}_ip}:${container_b_port}"
	else
	    cmd_1="iptables -A PREROUTING -t nat -i \${device} -p tcp ${source_args} --dport ${container_a_port} -j DNAT --to \${${container_b}_ip}:${container_b_port}"
	    cmd_2="iptables -A FORWARD -p tcp -d \${${container_b}_ip}  ${source_args} --dport ${container_b_port} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT"
	fi

	if [ "${op}" == "+" ]; then
	    if [ -n "${verbose}" ]; then
		echo "[INFO]: linking $container_a $container_a_port to $container_b $container_b_port"
	    fi

	    # If we are linking containerA and B, they need to be autostarted or
	    # we'll get bad rules on reboot
	    start=$(cube-cfg get -n ${container_b} autostart:)
	    if [ "${start}" != "essential" ]; then
		cube-cfg set -n ${container_b} autostart:dom0
	    fi

	    # TODO. The number of commands needs to be dynamic ..but for now, we'll keep it simple
	    check_isset ${out_dir}/cube.network.stack "$cmd_1"
	    if [ $? -eq 0 ]; then
		echo "${cmd_1}" >> ${out_dir}/cube.network.stack
		echo "${cmd_2}" >> ${out_dir}/cube.network.stack
	    fi
	else
	    if [ -n "${verbose}" ]; then
		echo "[INFO]: removing link from $container_a $container_a_port to $container_b $container_b_port"
	    fi
	    if [ -f "cube.network.stack" ]; then
		sed "\|${cmd_1}|d" -i ${out_dir}/cube.network.stack
		sed "\|${cmd_2}|d" -i ${out_dir}/cube.network.stack
	    fi
	fi
	;;
    link-raw)
	container=${cmd_options_non_dashed[1]}
	command=${cmd_options_non_dashed[@]:2}
	if [ -d "${out_dir}/${container}" ]; then
	    eval echo ${command} >> ${out_dir}/${container}/cube.network.stack
	fi
	;;
    link-edit)
	container=${cmd_options_non_dashed[1]}
	if [ -d "${out_dir}/${container}" ]; then
	    if [ -z "${EDITOR}" ]; then
		EDITOR=vim
	    fi
	    ${EDITOR} ${out_dir}/${container}/cube.network.stack
	fi
	;;
    attribute)
	op=${cmd_options_non_dashed[1]}
	attribute=${cmd_options_non_dashed[2]}

	if [ -z "${attribute}" ]; then
	    # was there a + or - as part of the attribute ?
	    case ${op} in
		-*)
		    attribute=$(echo ${op} | sed 's/^-//')
		    op="-"
		    ;;
		+*)
		    attribute=$(echo ${op} | sed 's/^+//')
		    op="+"
		    ;;
		*)
		    attribute=${op}
		    op=""
		    ;;
	    esac
	fi

	if [ -z "${op}" ] && [ -z "${attribute}" ]; then
	    # we should output the attributes if they exist
	    if [ -e ${out_dir}/cube.attributes ]; then
		cat ${out_dir}/cube.attributes | sed 's/^[ \t]*//;s/[ \t]*$//'
	    fi
	    exit 0
	fi
	if [ -z "${op}" ]; then
	    echo "ERROR: no operation was specified (+ or -)"
	    usage_attribute
	    exit 1
	fi
	if [ -z "${attribute}" ]; then
	    echo "ERROR: no attribute was specified"
	    usage_attribute
	    exit 1
	fi

	## TODO combine this with the get/set code below, since this really
	## is just a variant that uses append/remove
	if [ -e ${out_dir}/cube.attributes ]; then
	    cat ${out_dir}/cube.attributes | grep -q -w ${attribute}
	    if [ $? -eq 0 ]; then
		alreadyset=t
	    fi
	fi
	case ${op} in
	    +)
		if [ -z "${alreadyset}" ]; then
		    echo -n "${attribute} " >> ${out_dir}/cube.attributes
		fi
		;;
	    -)
		if [ -n "${alreadyset}" ]; then
		    sed "s/${attribute}//g" -i ${out_dir}/cube.attributes
		fi
		;;
	esac
	;;
    hook|hook-script)
	# drop "hook" from the command options, and then output everything
	# after it. We'll have a <type>:<command> in name_temp.
	name_temp=${cmd_options_non_dashed[@]:1}

	if [ -n "${clean}" ]; then
	    clean_config_artifacts hooks
	fi

	colons=$(echo ${name_temp} | sed -e 's/\(.\)/\1\n/g' | grep : | wc -l)
	if [ ${colons} -eq 1 ]; then
	    # we have <source>:<dest>
	    type=$(echo ${name_temp} | cut -f1 -d:)
	    hookname=$(echo ${name_temp} | cut -f2 -d:)

	    # danger! repeated code, this needs to be unified with the attributes
	    #         and device code.
	    if [ -n "${type}" ]; then
		# was there a + or - as part of the hook type ?
		case ${type} in
		    -*)
			type=$(echo ${type} | sed 's/^-//')
			op="-"
			;;
		    +*)
			type=$(echo ${type} | sed 's/^+//')
			op="+"
			;;
		    *)
			op="+"
		    ;;
		esac
	    fi

	    if [ "${cmd}" == "hook-script" ]; then
		# When we later generate hooks, spaces in the hook definition
		# are processed as args to the executable. Due to the way
		# that shell scripts are invoked as hooks, we need all of the
		# script paramaters to be a single arg. To make sure this
		# happens, we replaces spaces with a placeholder ##space##
		# that will be converted back to spaces later
		hookname=$(echo ${hookname} | sed 's/ /##space##/g')
		hookname="/bin/sh -c ${hookname}"
	    fi

	    if [ "${type}" == "prestart" ]; then
		outfile="${out_dir}/.cube.hooks.prestart"
	    elif [ "${type}" == "poststart" ]; then
		outfile="${out_dir}/.cube.hooks.poststart"
	    elif [ "${type}" == "poststop" ]; then
		outfile="${out_dir}/.cube.hooks.poststop"
	    else
		echo "ERROR: invalid hook type specified ${type}"
		exit 1
	    fi

	    if [ "${op}" == "+" ]; then
		check_isset ${outfile} ${hookname}
		if [ $? -eq 0 ]; then
		    # it isn't already set
		    echo "${hookname}" >> ${outfile}
		fi
	    else
		if [ -f "${outfile}" ]; then
		    sed "\|^${hookname}$|d" -i ${outfile}
		fi
	    fi
	else
	    echo "ERROR: Invalid hook specified ${name_temp}"
	    usage_hook
	    exit 1
	fi
	;;
    device|dev)
	name_temp=${cmd_options_non_dashed[1]}

	if [ -n "${clean}" ]; then
	    clean_config_artifacts device
	fi

	colons=$(echo ${name_temp} | sed -e 's/\(.\)/\1\n/g' | grep : | wc -l)
	if  [ ${colons} -eq 0 ]; then
	    # this is a get, i.e. cube-cfg device vt
	    device_type=${name_temp}
	    if [ -e "${out_dir}/.cube.device.${device_type}" ]; then
		cat "${out_dir}/.cube.device.${device_type}"
	    else
		echo ""
	    fi
	elif [ ${colons} -eq 2 ]; then
	    # we have <type>:<source>:<dest>
	    device_type=$(echo ${name_temp} | cut -f1 -d:)
	    essential_device=$(echo ${name_temp} | cut -f2 -d:)
	    container_device=$(echo ${name_temp} | cut -f3 -d:)

	    if [ -n "${device_type}" ]; then
		# was there a + or - as part of the device ?
		case ${device_type} in
		    -*)
			device_type=$(echo ${device_type} | sed 's/^-//')
			op="-"
			;;
		    +*)
			device_type=$(echo ${device_type} | sed 's/^+//')
			op="+"
			;;
		    *)
			op="+"
			;;
		esac
	    fi

	    # save the mount information for the generation phase
	    case "${device_type}" in
		network)
		    check_isset ${out_dir}/.cube.device.network "$essential_device:$container_device"
		    if [ $? -eq 1 ]; then
			alreadyset=t
		    fi
		    case ${op} in
			+)
			    if [ -z "${alreadyset}" ]; then
				echo "$essential_device:$container_device"  >> ${out_dir}/.cube.device.network
			    fi
			    ;;
			-)
			    if [ -n "${alreadyset}" ]; then
				sed "\#^${essential_device}:${container_device}\$#d" -i ${out_dir}/.cube.device.network
			    fi
			    ;;
		    esac
		    ;;
		network-virt)
		    check_isset ${out_dir}/.cube.device.network "veth:$essential_device:$container_device"
		    if [ $? -eq 1 ]; then
			alreadyset=t
		    fi
		    case ${op} in
			+)
			    if [ -z "${alreadyset}" ]; then
				echo "veth:$essential_device:$container_device"  >> ${out_dir}/.cube.device.network
			    fi
			    ;;
			-)
			    if [ -n "${alreadyset}" ]; then
				sed "\#^veth:${essential_device}:${container_device}\$#d" -i ${out_dir}/.cube.device.network
			    fi
			    ;;
		    esac
		    ;;
		vt)
		    check_isset ${out_dir}/.cube.device.vt "$essential_device:$container_device"
		    if [ $? -eq 1 ]; then
			alreadyset=t
		    fi
		    case ${op} in
			+)
			    if [ -z "${alreadyset}" ]; then
				echo "$essential_device:$container_device"  >> ${out_dir}/.cube.device.vt
			    fi
			    ;;
			-)
			    if [ -n "${alreadyset}" ]; then
				sed "\#^${essential_device}:${container_device}\$#d" -i ${out_dir}/.cube.device.vt
			    fi
			    ;;
		    esac
		    ;;
	    esac
	else
	    echo "ERROR: Invalid device specified ${name_temp}"
	    usage_device
	    exit 1
	fi
	;;
    set|get)
	;&
    *:*)
	var_value=${cmd_options_non_dashed[@]:1}
	if [ -z "${var_value}" ]; then
	    var_value="${cmd}"
	    var=$(echo ${var_value} | cut -d: -f1)
	    value=$(echo ${var_value} | sed "s#.*${var}:##")

	    # set or get wasn't passed on the command line, so we determine
	    # if this is set or get based on which values are empty.

	    # - if both are defined, then this is a set
	    # - if only the var is defined, then this is a get
	    # - if only the value is defined, it is a clear/delete
	    #   and the value is actually the variable
	    if [ -n "${var}" ] && [ -n "${value}" ]; then
		cmd="set"
	    elif [ -n "${var}" ] && [ -z "${value}" ]; then
		cmd="get"
	    elif [ -z "${var}" ] && [ -n "${value}" ]; then
		# this is a delete operation
		cmd="set"
		var=$value
		value=""
	    fi
	else
	    var=$(echo ${var_value} | cut -d: -f1)
	    value=$(echo ${var_value} | sed "s#.*${var}:##")
	fi

	# danger! repeated code, this needs to be unified with the attributes
	#         and device code.
	if [ -n "${var}" ]; then
	    # was there a + or - as part of the variable name ?
	    case ${var} in
		-*)
		    var=$(echo ${var} | sed 's/^-//')
		    op="-"
		    ;;
		+*)
		    var=$(echo ${var} | sed 's/^+//')
		    op="+"
		    ;;
		*)
		    op="+"
		    ;;
	    esac
	fi

	if [ -z "${CONFIG_MAP[$var]}" ]; then
	    echo $var | grep -q /
	    if [ $? -ne 0 ]; then
		echo "[ERROR]: '$var' is not a known setting"
		exit 1
	    else
		etcd=t
		db_var="$var"
	    fi
	else
	    db_var=$(echo "${CONFIG_MAP[$var]}" | cut -f1 -d\;)
	fi

	# note: the backend that stores these values will change over time
	#       for now, it is a simple on-disk file. It could be a git config
	#       format file, etcd, or a database in the future

	if [ -n "${etcd}" ]; then
	    # if there's a / in the variable, it is destined for a data
	    # store. Note: this could also be a flag to the call, i.e. --etcd
	    # but lets go with this for now
	    if [ ${cmd} = "set" ]; then
		## TODO: if "value" is empty we should be deleting the key, right now
		##       there is no way to do it.
		etcd_inject ${var} ${value}
	    else
		etcd_fetch ${var}
	    fi
	else

	    if [ "${cmd}" = "set" ]; then
		outvar=${out_dir}/${db_var}
		if [ -n "${runonce}" ]; then
		    outvar=${out_dir}/${db_var}.runonce
		fi

		if [ -f ${out_dir}/${db_var} ]; then
		    previous=$(cat ${out_dir}/${db_var})
		fi

		# type can be single or multi
		# if multi then we are always doing an append on a set operation
		# if single then we are clobbering on a set operation
		var_type=$(echo "${CONFIG_MAP[$var]}" | cut -d';' -f3)
		if [ "${var_type}" = "multi" ]; then
		    append_multi=t
		fi

		if [ -n "${runonce}" ]; then
		    if [ -e ${out_dir}/${db_var} ]; then
			cp ${out_dir}/${db_var} ${out_dir}/${db_var}.runonce
		    fi
		    # trigger a regen on the next start command
		    touch ${out_dir}/.cube.runonce.regen
		fi
		if [ "${op}" == "+" ]; then
		    if [ -n "${prepend}" ]; then
			echo "${value} ${previous}" > ${outvar}

		    elif [ -n "${append}" ]; then
			echo "${previous} ${value}" > ${outvar}
		    elif [ -n "${append_multi}" ]; then
			check_isset ${outvar} "${value}"
			if [ $? -eq 0 ]; then
			    echo "${value}" >> ${outvar}
			fi
		    else
			echo "${value}" > ${outvar}
		    fi
		else
		    if [ -f ${outvar} ]; then
			sed "s%${value} *%%g" -i ${outvar}
		    fi
		fi

		if [ -z "${previous}" ]; then
		    previous="none"
		fi
		set_hook=$(echo "${CONFIG_MAP[$var]}" | cut -d';' -f2)
		if [ -n "${set_hook}" ] && [ "${set_hook}" != "noop" ]; then
		    eval ${set_hook} ${previous} ${value} ${outvar}
		fi
	    else
		outvar=${out_dir}/${db_var}
		if [ -n "${runonce}" ]; then
		    if [ -e "${out_dir}/${db_var}.runonce" ]; then
			outvar=${out_dir}/${db_var}.runonce
		    fi
		fi
		if [ -e "${outvar}" ]; then
		    cat "${outvar}"
		else
		    echo ""
		fi
	    fi
	fi
	;;
    *)
	echo "Unknown command ..."
	usage_global
	;;
esac
