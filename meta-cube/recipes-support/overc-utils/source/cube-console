#!/bin/bash

#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2 as
#  published by the Free Software Foundation.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#  See the GNU General Public License for more details.

usage()
{
cat << EOF

  cube-console [--ns] [--notraps] [-v] <console name>

  console name: a valid console name.

                If "list" is passed, available consoles are displayed.

  --ns: enter a namespace shell. Only available from privileged control
        domains.

  --notraps: do not monitor for an exit sequence. If this option is not
             specified.  'ctrl-\': force exits the shell immediately (no clean logout).

  -v: print the console exit return value.
  
  example:

      $ cube-console list    
      $ cube-console cube-essential
      $ cube-console dom0
      $ cube-console -v dom0
      $ cube-console --notraps dom0
      $ cube-console --ns dom0
 
EOF
}

if [ -z "$1" ]; then
    usage
    exit
fi

while [ $# -gt 0 ]; do
    case "$1" in
	-v) verbose=t
            ;;
	--force) force=t
            ;;
	--notraps) notraps=t
            ;;
	--ns) namespace=t
            ;;
	-h|--help|?)
	    usage
	    exit
	    ;;
        *) break
            ;;
    esac
    shift
done

# only dom0 has visibility to essential
if [ -d "/var/lib/cube/essential" ]; then
    we_are_dom0=t
fi

# returns 1 if we are container, 0 otherwise
function am_i_a_container()
{
    local virt=`systemd-detect-virt`
    case $virt in
	lxc*)
	    return 1
	    ;;
	container*)
	    return 1
	    ;;
	docker*)
	    return 1
	    ;;
    esac

    return 0
}

function do_console()
{
    local target=$1
    local type=$2 # namspace or login

    if [ -n "${we_are_dom0}" ]; then
	if [ "${target}" == "essential" ]; then
	    cmd="script -q -c '/sbin/agetty -J -' /dev/null"
	else
	    mgr=$(cube-cfg -o /opt/container/${target}/ get cube.container.mgr)
	    echo ${mgr} | grep -q runc
	    if [ $? -eq 0 ]; then
		cmd="${mgr} exec -- ${target} script -q -c '/sbin/agetty -J -' /dev/null"
	    fi
	    echo ${mgr} | grep -q pflask
	    if [ $? -eq 0 ]; then
		cmd="machinectl login ${target}"
	    fi
	fi
	local nsargs=""
	if [ -e /proc/1/ns/cgroup ] ; then
	    nsargs=-C
	fi
	eval nsenter -P -t 1 -p -n -i -u -m $nsargs ${cmd}
	return
    fi

    if [ -z "${type}" ]; then
	type=login
    fi

    if [ -n "${namespace}" ]; then
        #(echo "nsenter ${target}" | nanoclient -q $debug -R ipc:///var/lib/cube/local/cmd-pipe) &
	true
    else
	# TODO: can we just detect the streams closing now and forget about
	#       the timeout ?
	cube-cmd --unbuffered --timeout 9000 -- agetty -J -
    fi
}

# Parms: $1: target container/console
function enter_console
{
    local consolename=$1

    case $consolename in
        list)
	    if [ -n "${we_are_dom0}" ]; then
		x=$(cube-ctl list)
		x=$(echo "$x"; echo -n essential)
	    else
		x="dom0"
	    fi
	    echo "$x"
	    ;;
	*essential*)
	    if [ -n "${we_are_dom0}" ]; then
		do_console essential
	    else
		echo "ERROR: essential console is only available to dom0"
		exit 1
	    fi
	    ;;
	*dom0*)
	    do_console dom0 login
	    ;;
	*)
	    if [ -n "${we_are_dom0}" ] || [ -n "${force}" ]; then
		do_console ${consolename} login
	    else
		echo "ERROR: only connections to dom0 are supported from non-system containers"
		exit 1
	    fi
	    ;;
    esac
}

am_i_a_container
if [ $? -eq 0 ]; then
    echo "ERROR: host detected, cube-console only works in a monitored container."
    echo "       Commands must be directly invoked in essential, control functions"
    echo "       via the control domain."
    exit 1
fi

enter_console $1
