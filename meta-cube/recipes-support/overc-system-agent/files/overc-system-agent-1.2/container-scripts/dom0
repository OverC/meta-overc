#!/bin/bash

OVERC_CTL=/opt/overc-installer/overc-ctl
C3=/usr/sbin/c3

IMAGE_DIR=/root/images

UPSTREAM_URL=http://openlinux.windriver.com/overc/images/genericx86-64/
DOM0_IMAGE=cube-dom0-genericx86-64.tar.bz2
DOM1_IMAGE=cube-dom1-genericx86-64.tar.bz2
DOME_IMAGE=cube-desktop-genericx86-64.tar.bz2

usage() {
	cat <<EOT;
Usage: $0 [OPTION] ...

  -A -n <container name>
	container status

	retval:
	0: does not exist
	2: exists, not active
	3: exists, active

  -a -n <container name> [-f]
	activate container

	-f: force
  -R -n <container name> [-f]
	rollback container with last snapshot

	-f: force
  -L
	list containers
  -B -n <container name>
	list container snapshots
  -s -u <container url>
	update container image with url
  -U
	update container image
  -S -n <container name>
	start container
  -K -n <container name>
	stop container
  -d -n <container name> [-f]
	delete container

	-f: force
  -r -n <container name> [-f]
        update container using rpm packages
	
	-f: force not to delete all of the container's history snapshots
	    before create a latest snapshot of this container, otherwise,
	    it will delete all of the container's history snapshots by default.
  -p -n <container name>
        creates a snapshot of the container
  -D -n <container name>
        deletes all snapshots of the container
EOT
}

# Text colors
BLD_NOTE="\\033[1;29m"    # Bright base color
BLD_WARNING="\\033[1;33m" # Bright yellow
BLD_ERROR="\\033[1;31m"   # Bright red
STD_NOTE="\\033[29m"      # Base color
STD_WARNING="\\033[33m"   # Yellow
STD_ERROR="\\033[31m"     # Red
RST="\\033[0m"            # Reset colors

#
# Helper functions
#
log_info() {
    echo -e $BLD_NOTE"[INFO]""$RST: $STD_NOTE$@$RST"
}

log_warn() {
    echo -e $BLD_WARNING"[WARNING]""$RST: $STD_WARNING$@$RST" >&2
}

log_error() {
    echo -e $BLD_ERROR"[ERROR]""$RST: $STD_ERROR$@$RST" >&2
    return 1
}

# Determine the status of a given container
#
# Expected format we need to parse:
#
# root@cube-dom0:~# /usr/sbin/c3 list
# name          type  status   attributes  addresses
# ----          ----  ------   ----------  ---------
# cube-desktop  oci   running  --          192.168.42.200
# dom0          cube  running  vrf         netprime        192.168.42.1,10.0.2.15
# dom1          oci   running  --          192.168.42.201
#
#     return value:
#        0: does not exist
#        2: exists, not active
#        3: exists, active
#
container_status() {
	local container=$1
	local retval=0

	while read l; do
		cntr=$(echo $l | awk '{print $1;}')
		status=$(echo $l | awk '{print $3;}')
		if [ "$cntr" = "$container" ]; then
			if [ "$status" = "running" ]; then
				retval=3
			elif [ "$status" = "stopped" ] || [ "$status" = "available" ]; then
				retval=2
			fi
		fi
	done <<< "$($C3 list | tail +3)"
	return $retval
}

# Uses overc-ctl
#
# Adds a new container which doesn't already exist or upgrade
#
# add -n <container name> -f <rootfs tarball> [-a] [-g group] [-t num]
# upgrade -n <container name> -f <rootfs tarball> [-a] [-g group] [-r] [-t num]
#
# Unpacks a new version of an existing container, and switches the current
# to be it.  If the container is running, you will be asked if you want
# to stop, switch, then restart it.  Upgrades will not happen if the
# container is running, so if you don't confirm stopping it, the upgrade is
# aborted.  If -r is not given, then the old version is placed at the top
# of the history rollback list.  If -r is given, the old version is
# removed from the system and is not available to rollback to.  Use -r
# with caution.
#
# Start container, if fail, try to rollback
activate() {
	local container=$1
	local rootfs

	case "${container}" in
		dom0)
			rootfs=$IMAGE_DIR/$DOM0_IMAGE
			;;
		dom1)
			rootfs=$IMAGE_DIR/$DOM1_IMAGE
			;;
		*desktop)
			rootfs=$IMAGE_DIR/$DOME_IMAGE
			;;
		*)
			rootfs=$IMAGE_DIR/cube-${container}-genericx86-64.tar.bz2
			;;
	esac

	if [ ! -e $rootfs ]; then
		log_error "Rootfs $rootfs is missing"
		exit 1
	fi

	if [ "$container" = "dom0" ]; then
		# snapshots happens with upgrade
		$OVERC_CTL upgrade $container $rootfs -f
		exit $?
	fi

	# 0: does not exist
	# 2: exists, not active
	# 3: exists, active
	container_status $container
	status=$?

	if [ $status -eq 3 ]; then
		if [ $force -eq 1 ]; then
			stop_container $container
		else
			log_error "Container is active"
			exit 1
		fi
	fi

	$OVERC_CTL upgrade $container $rootfs -f
	if [ $status -eq 0 ]; then
		upgrade=0
	else
		upgrade=1
	fi

	# from here we need to try starting the new container
	# and rollback on failure? (for upgrade)
	start_container $container
	if [ $? -ne 0 ]; then
		if [ $upgrade -eq 1 ]; then
			log_info "Rollback needed"
			rollback_container $container
		else
			exit 1
		fi
	fi
	exit 0
}

# overc-ctl
#
# rollback -n <container name> [-r]
#
# Switches the current container version to be the one at the top of
# the history rollback list.  On success, the entry is removed
# from the history list.  If -r is given, the previous container version that
# was just switched out, is completejy removed from the system.
#
rollback_container() {
	local container=$1

	if [ "$force" -eq 1 ]; then
		$OVERC_CTL rollback $container -f
	else
		$OVERC_CTL rollback $container
	fi
}

list_snapshots() {
	local container=$1

	$OVERC_CTL snapshot-list $container
}

snapshot() {
	local container=$1

	$OVERC_CTL snapshot-create $container
}

pull_single_image() {
	local url=$1
	local tmp=`mktemp -d `

	wget -P $tmp $url
	if [ $? -eq 0 ]; then
		# test what we downloaded
		items=0
		for i in $tmp/*;do
			if [ -f $i ]; then
				items=$(expr $items + 1)
				new_image=$i
			fi
		done
		if [ $items -ne 1 ]; then
			log_error "Upstream $url downloaded an unexpected number of files [$items]"
			exit 1
		fi
		if [ ! -d $IMAGE_DIR ]; then
			mkdir -p $IMAGE_DIR
		fi
		mv $new_image $IMAGE_DIR
		if [ $? -ne 0 ]; then
			exit 1
		fi
		rmdir $tmp
	else
		rm -rf $tmp
		exit 1
	fi
}

pull_image() {
	local url
	for url in $DOM0_IMAGE $DOM1_IMAGE $DOME_IMAGE; do
		pull_single_image $UPSTREAM_URL/$url
	done
}

# "launch" will look config file to see
# what its type and then invoke either "launch-peer" or "launch-nested"
start_container() {
	local container=$1

	if [ "$container" = "dom0" ]; then
		log_error "Starting of dom0 not supported"
		exit 1
	fi
	$C3 ctl start $container
	if [ $? -ne 0 ]; then
		return 1
	fi

	# monitor to see if the container started successfully
	max_wait=5
	while [ $max_wait -ge 0 ]; do
		container_status $container
		if [ $? -eq 3 ]; then
			log_info "Container $container started ok"
			return 0
		fi
		sleep 1
		max_wait=$(expr $max_wait - 1)
	done
	# failed to start
	log_error "$container failed to start"
	return 1
}

stop_container() {
	local container=$1

	if [ "$container" = "dom0" ]; then
		log_info "Stopping of dom0 not supported"
		exit 1
	fi
	$C3 ctl stop $container
}

list_container() {
	$C3 list
}

format_size() {
	local size=$1
	size_unit=${size: -1}
	size_num=`echo $size | sed "s/${size_unit}//"`

        case $size_unit in
		"K")
			num=`echo "$size_num*1000"|bc`
			echo $((${num//.*/+1}))
			;;
		"M")
			num=`echo "$size_num*1000*1000"|bc`
			echo $((${num//.*/+1}))
			;;
		"G")
			num=`echo "$size_num*1000*1000*1000"|bc`
			echo $((${num//.*/+1}))
			;;
		"*")
			log_error "cannot recognize size"
			exit 1
			;;
	esac
}

rpm_upgrade() {
	local container=$1

	if [ ! $force -eq 1 ]; then
		delete_snapshots $container
	fi

	$OVERC_CTL upgrade $container -f
}

delete_container() {
	local container=$1

	$C3 ctl del -F $container
}

delete_snapshots() {
	local container=$1

	$OVERC_CTL snapshot-delall $container
}

set_command() {
	if [ -n "$command" ]; then
		log_error "Multiple actions not supported"
		exit 1
	fi
	command=${1}
}

verify_arg_set() {
	arg=$1

	cmd="if [ -z \$$arg ]; then echo \"Error! $arg not specified\"; exit 1; fi"
	eval $cmd
}

force=0
command=""

while getopts :DasprUSKLBRAn:fu:b:d opt
do
	case $opt in
	n)
		if [ -n "$container" ]; then
			log_error "Container specified more than once"
			exit 1
		fi
		container=$OPTARG
		;;
	f)
		if [ $force -ne 0 ]; then
			log_error "Force specified more than once"
			exit 1
		fi
		force=1
		;;
	u)
		if [ -n "$container_url" ]; then
			log_error "Container url specified more than once"
			exit 1
		fi
		container_url=$OPTARG
		;;
	b)
		if [ -n "$snapshot" ]; then
			log_error "Snapshot specified more than once"
			exit 1
		fi
		snapshot=$OPTARG
		;;
	A)
		set_command "status"
		;;
	a)
		set_command "activate"
		;;
	s)
		set_command "sync"
		;;
	U)
		set_command "update"
		;;
	S)
		set_command "start"
		;;
	K)
		set_command "stop"
		;;
	L)
		set_command "list"
		;;
	B)
		set_command "list_snapshots"
		;;
	R)
		set_command "rollback"
		;;
	d)
		set_command "delete"
		;;
        p)
		set_command "snapshot"
		;;
        r)
		set_command "rpm_upgrade"
		;;
	D)
		set_command "delete_snapshots"
		;;
	*)
		usage
		exit 1
		;;
	esac
done

retval=0
case "${command}" in
	status)
		verify_arg_set container
		container_status $container
		retval=$?
		;;
	activate)
		verify_arg_set container
		log_info "Activate container: $container"
		activate $container
		;;
	sync)
		verify_arg_set container_url
		log_info "Update container image with $container_url"
		pull_single_image $container_url
		;;
	update)
		log_info "Pull on container image"
		pull_image
		;;
	start)
		verify_arg_set container
		log_info "Start container $container"
		start_container $container
		retval=$?
		;;
	stop)
		verify_arg_set container
		log_info "Stop container $container"
		stop_container $container
		;;
	list)
		log_info "List containers"
		list_container
		;;
	list_snapshots)
		verify_arg_set container
		log_info "List snapshots on container: $container"
		list_snapshots $container
		;;
	snapshot)
		verify_arg_set container
		log_info "Create snapshot on container: $container"
		snapshot $container
		;;
	rollback)
		verify_arg_set container
		if [ -n "$snapshot" ]; then
			log_warn "Rolling back to a specified snapshot image is not supported, ignoring option [$snapshot]"
		fi
		rollback_container $container
		retval=$?
		;;
	delete)
		verify_arg_set container
		log_info "Delete container: $container"
		delete_container $container
		retval=$?
		;;
	rpm_upgrade)
		verify_arg_set container
		log_info "RPM upgrade container: $container"
		rpm_upgrade $container
		retval=$?
		;;
	delete_snapshots)
		verify_arg_set container
		log_info "Delete snapshots container: $container"
		delete_snapshots $container
		retval=$?
		;;
	*)
		log_error "Command not specified"
		retval=1
		;;
esac
exit $retval
