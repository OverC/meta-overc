#!/bin/bash

OVERC_CCTL=/opt/overc-installer/overc-cctl
DOM0_CTL=/opt/dom0-contctl/dom0_contctl

IMAGE_DIR=/root/images

UPSTREAM_URL=http://openlinux.windriver.com/overc/images/genericx86-64/
DOM0_IMAGE=cube-dom0-genericx86-64.tar.bz2
DOM1_IMAGE=cube-dom1-genericx86-64.tar.bz2
DOME_IMAGE=cube-desktop-genericx86-64.tar.bz2

usage() {
	cat <<EOT;
Usage: $0 [OPTION] ...

  -A -n <container name>
	container status

	retval:
	0: does not exist
	2: exists, not active
	3: exists, active

  -a -n <container name> [-f]
	activate container

	-f: force
  -R -n <container name> [-f]
	rollback container with last snapshot

	-f: force
  -L
	list containers
  -B -n <container name>
	list container snapshots
  -s -u <container url>
	update container image with url
  -U
	update container image
  -S -n <container name>
	start container
  -K -n <container name>
	stop container
  -d -n <container name> [-f]
	delete container

	-f: force
  -r -n <container name>
        update container using rpm packages
  -p -n <container name>
        creates a snapshot of the container
  -D -n <container name>
        deletes all snapshots of the container
EOT
}

# Expected format:
#
# root@cube-17-08-15-dom0:/opt/dom0-contctl# ./dom0_contctl list
# demoService (lxc) - STOPPED
# dom0 (lxc) - Container that I'm in
# dom1 (lxc) (/) - RUNNING
# cube-desktop (lxc) (/) - RUNNING
# s1 (lxc) - STOPPED
#
#     return value:
#        0: does not exist
#        2: exists, not active
#        3: exists, active
#
container_status() {
	local container=$1
	local retval=0

	while read l; do
		c=$(echo $l|awk '{print $1;}')
		s=$(echo $l|awk -F' - ' '{print $2;}')
		if [ "$c" = "$container" ]; then
			if [ "$s" = "Container that I'm in" -o "$s" = "RUNNING" ]; then
				retval=3
			elif [ "$s" = "STOPPED" ]; then
				retval=2
			fi
		fi
	done < <($DOM0_CTL list)
	return $retval
}

# Uses overc-cctl
#
# Adds a new container which doesn't already exist or upgrade
#
# add -n <container name> -f <rootfs tarball> [-a] [-g group] [-t num]
# upgrade -n <container name> -f <rootfs tarball> [-a] [-g group] [-r] [-t num]
#
# Unpacks a new version of an existing container, and switches the current
# to be it.  If the container is running, you will be asked if you want
# to stop, switch, then restart it.  Upgrades will not happen if the
# container is running, so if you don't confirm stopping it, the upgrade is
# aborted.  If -r is not given, then the old version is placed at the top
# of the history rollback list.  If -r is given, the old version is
# removed from the system and is not available to rollback to.  Use -r
# with caution.
#
# Start container, if fail, try to rollback
activate() {
	local container=$1
	local rootfs
	local opts

	case "${container}" in
		dom0)
			rootfs=$IMAGE_DIR/$DOM0_IMAGE
			;;
		dom1)
			rootfs=$IMAGE_DIR/$DOM1_IMAGE
			;;
		*desktop)
			rootfs=$IMAGE_DIR/$DOME_IMAGE
			;;
		*)
			rootfs=$IMAGE_DIR/cube-${container}-genericx86-64.tar.bz2
			;;
	esac

	if [ ! -e $rootfs ]; then
		echo "Error! Rootfs $rootfs is missing"
		exit 1
	fi

	# from cubeit-installer
	if [ "$container" = "dom0" ]; then
		opts="-d -a -g onboot -t 0"
	else
		opts="-d -p -g peer -t 0"
	fi

	if [ "$container" = "dom0" ]; then
		# snapshots happens with upgrade
		$OVERC_CCTL upgrade -n $container -f $rootfs $opts -F
		exit $?
	fi

	# 0: does not exist
	# 2: exists, not active
	# 3: exists, active
	container_status $container
	status=$?

	if [ $status -eq 3 ]; then
		if [ $force -eq 1 ]; then
			stop_container $container
		else
			echo "Error! Container is active"
			exit 1
		fi
	fi

	if [ $status -eq 0 ]; then
		upgrade=0
		$OVERC_CCTL add -n $container -f $rootfs $opts -F
	else
		upgrade=1
		# snapshots happens with upgrade
		$OVERC_CCTL upgrade -n $container -f $rootfs $opts -F
	fi

	# from here we need to try starting the new container
	# and rollback on failure? (for upgrade)
	start_container $container
	if [ $? -ne 0 ]; then
		if [ $upgrade -eq 1 ]; then
			echo "Rollback needed"
			rollback_container $container
		else
			exit 1
		fi
	fi
	exit 0
}

# overc-cctl
#
# rollback -n <container name> [-r]
#
# Switches the current container version to be the one at the top of
# the history rollback list.  On success, the entry is removed
# from the history list.  If -r is given, the previous container version that
# was just switched out, is completejy removed from the system.
#
rollback_container() {
	local container=$1
	
	if [ $force -eq 0 ]; then
	    if [ $container != "dom0" ]; then
	        # 0: does not exist
	        # 2: exists, not active
	        # 3: exists, active
		container_status $container
		status=$?
		if [ $status -eq 0 ]; then
			echo "Error! Container $container does not exist"
			exit 1
		elif [ $status -eq 3 ]; then
			echo "Error! Container $container is active"
			exit 1
		fi
	    fi
	fi
	$OVERC_CCTL rollback -n $container -F -r
}

list_snapshots() {
	local container=$1

	$OVERC_CCTL histlist -n $container
}

snapshot() {
	local container=$1
	$OVERC_CCTL snapshot -n $container
}

pull_single_image() {
	local url=$1
	local tmp=`mktemp -d `

	wget -P $tmp $url
	if [ $? -eq 0 ]; then
		# test what we downloaded
		items=0
		for i in $tmp/*;do
			if [ -f $i ]; then
				items=$(expr $items + 1)
				new_image=$i
			fi
		done
		if [ $items -ne 1 ]; then
			echo "Error! Upstream $url downloaded an unexpected number of files [$items]"
			exit 1
		fi
		if [ ! -d $IMAGE_DIR ]; then
			mkdir -p $IMAGE_DIR
		fi
		mv $new_image $IMAGE_DIR
		if [ $? -ne 0 ]; then
			exit 1
		fi
		rmdir $tmp
	else
		rm -rf $tmp
		exit 1
	fi
}

pull_image() {
	local url
	for url in $DOM0_IMAGE $DOM1_IMAGE $DOME_IMAGE; do
		pull_single_image $UPSTREAM_URL/$url
	done
}

# "launch" will look config file to see
# what its type and then invoke either "launch-peer" or "launch-nested"
start_container() {
	local container=$1

	if [ "$container" = "dom0" ]; then
		echo "Starting of dom0 not supported"
		exit 1
	fi
	$DOM0_CTL launch -n $container
	if [ $? -ne 0 ]; then
		return 1
	fi

	# monitor to see if the container started successfully
	max_wait=5
	while [ $max_wait -ge 0 ]; do
		container_status $container
		if [ $? -eq 3 ]; then
			echo "Container $container started ok"
			return 0
		fi
		sleep 1
		max_wait=$(expr $max_wait - 1)
	done
	# failed to start
	echo "Error! $container failed to start"
	return 1
}

stop_container() {
	local container=$1

	if [ "$container" = "dom0" ]; then
		echo "Stopping of dom0 not supported"
		exit 1
	fi
	$DOM0_CTL stop -n $container
}

list_container() {
	$DOM0_CTL list
}

runcmd_in_container() {
	$DOM0_CTL exec-cmd -n $1 $2
}

format_size() {
	local size=$1
	size_unit=${size: -1}
	size_num=`echo $size | sed "s/${size_unit}//"`

        case $size_unit in
		"K")
			num=`echo "$size_num*1000"|bc`
			echo $((${num//.*/+1}))
			;;
		"M")
			num=`echo "$size_num*1000*1000"|bc`
			echo $((${num//.*/+1}))
			;;
		"G")
			num=`echo "$size_num*1000*1000*1000"|bc`
			echo $((${num//.*/+1}))
			;;
		"*")
			echo "Error! cannot recognize size"
			exit 1
			;;
	esac
}

rpm_upgrade() {
	local container=$1

	runcmd_in_container $container "smart update"
	if [ ! $? -eq 0 ]; then
		echo "Error! smart update failed in container $container"
		exit 1
	fi
	runcmd_in_container $container "smart newer"
	if [ ! $? -eq 0 ]; then
		return 0
	fi

	c_raw_size=`du -hs /var/lib/lxc/${container}/rootfs | awk '{print $1}'`
	c_size=`format_size $c_raw_size`
	a_raw_size=`df -ha /var/lib/lxc/overc-containers | sed -n '2p' | awk '{print $4}'`
	a_size=`format_size $a_raw_size`

	if [ $a_size -ge $c_size ]; then
		echo "snapshots on container: $container"
		snapshot $container
	else
		echo "*******************************************************************"
		echo "  Warning: There isn't enough space left to snapshot conainer"
		echo "*******************************************************************"
	fi

	tempdir="/tmp/tmpd.$RANDOM"
	runcmd_in_container $container "mkdir -p $tempdir"
	runcmd_in_container $container "cp -r /var/lib/rpm $tempdir"
	runcmd_in_container $container "mount -t tmpfs tmpfs /var/lib/rpm"
	runcmd_in_container $container "cp -r $tempdir/rpm /var/lib/"
	runcmd_in_container $container "smart upgrade -y"
	runcmd_in_container $container "cp -r /var/lib/rpm $tempdir"
	runcmd_in_container $container "umount /var/lib/rpm"
	runcmd_in_container $container "cp -r $tempdir/rpm /var/lib/"
	runcmd_in_container $container "rm -rf $tempdir"
	runcmd_in_container $container "sed -i /^CUBEUPDATE:/d /etc/motd"
}

delete_container() {
	local container=$1

        # 0: does not exist
        # 2: exists, not active
        # 3: exists, active
	container_status $container
	status=$?

	if [ $status -eq 3 ]; then
		if [ $force -eq 1 ]; then
			stop_container $container
		else
			echo "Error! Container is active"
			exit 1
		fi
	elif [ $status -eq 0 ]; then
		echo "Error! Container does not exist"
		exit 1
	fi

	$OVERC_CCTL delete -n $container -F
}

delete_snapshots() {
	local container=$1

        # 0: does not exist
        # 2: exists, not active
        # 3: exists, active
	container_status $container
	status=$?

	if [ $status -eq 0 ]; then
		echo "Error! Container does not exist"
		exit 1
	fi

	$OVERC_CCTL histlist -n $container|while read l; do
		i=`echo $l|awk  '{print $1;}'`
		echo $i
		$OVERC_CCTL histdel -n $container -i $i -r
	done
}

set_command() {
	if [ -n "$command" ]; then
		echo "Error! Multiple actions not supported"
		exit 1
	fi
	command=${1}
}

verify_arg_set() {
	arg=$1

	cmd="if [ -z \$$arg ]; then echo \"Error! $arg not specified\"; exit 1; fi"
	eval $cmd
}

force=0
command=""

while getopts :DasprUSKLBRAn:fu:b:d opt
do
	case $opt in
	n)
		if [ -n "$container" ]; then
			echo "Error! Container specified more than once"
			exit 1
		fi
		container=$OPTARG
		;;
	f)
		if [ $force -ne 0 ]; then
			echo "Error! Force specified more than once"
			exit 1
		fi
		force=1
		;;
	u)
		if [ -n "$container_url" ]; then
			echo "Error! Container url specified more than once"
			exit 1
		fi
		container_url=$OPTARG
		;;
	b)
		if [ -n "$snapshot" ]; then
			echo "Error! Snapshot specified more than once"
			exit 1
		fi
		snapshot=$OPTARG
		;;
	A)
		set_command "status"
		;;
	a)
		set_command "activate"
		;;
	s)
		set_command "sync"
		;;
	U)
		set_command "update"
		;;
	S)
		set_command "start"
		;;
	K)
		set_command "stop"
		;;
	L)
		set_command "list"
		;;
	B)
		set_command "list_snapshots"
		;;
	R)
		set_command "rollback"
		;;
	d)
		set_command "delete"
		;;
        p)
		set_command "snapshot"
		;;
        r)
		set_command "rpm_upgrade"
		;;
	D)
		set_command "delete_snapshots"
		;;
	*)
		usage
		exit 1
		;;
	esac
done

retval=0
case "${command}" in
	status)
		verify_arg_set container
		container_status $container
		retval=$?
		;;
	activate)
		verify_arg_set container
		echo "Activate container: $container"
		activate $container
		;;
	sync)
		verify_arg_set container_url
		echo "Update container image with $container_url"
		pull_single_image $container_url
		;;
	update)
		echo "Pull on container image"
		pull_image
		;;
	start)
		verify_arg_set container
		echo "Start container $container"
		start_container $container
		retval=$?
		;;
	stop)
		verify_arg_set container
		echo "Stop container $container"
		stop_container $container
		;;
	list)
		echo "List containers"
		list_container
		;;
	list_snapshots)
		verify_arg_set container
		echo "List snapshots on container: $container"
		list_snapshots $container
		;;
	snapshot)
		verify_arg_set container
		echo "Create snapshot on container: $container"
		snapshot $container
		;;
	rollback)
		verify_arg_set container
		if [ -n "$snapshot" ]; then
			echo "Warning! Rolling back to a specified snapshot image is not supported, ignoring option [$snapshot]"
		fi
		rollback_container $container
		retval=$?
		;;
	delete)
		verify_arg_set container
		echo "Delete container: $container"
		delete_container $container
		retval=$?
		;;
	rpm_upgrade)
		verify_arg_set container
		echo "RPM upgrade container: $container"
		rpm_upgrade $container
		;;
	delete_snapshots)
		verify_arg_set container
		echo "Delete snapshots container: $container"
		delete_snapshots $container
		retval=$?
		;;
	*)
		echo "Error! Command not specified"
		retval=1
		;;
esac
exit $retval
