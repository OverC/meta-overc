From: Jason Wessel <jason.wessel@windriver.com>
Date: Thu, 11 Aug 2016 12:14:31 -0500
Subject: [PATCH 2/2] CLONE_UNCONTAIN: Add a new flag for clone to control
 access to root PID name space

The CLONE_UNCONTAIN flag is required when creating a new PID name space
in order to grant the same space CAP_ADMIN_NS, else the capability is
stripped when the name space is created at do_fork() time.  This will
allow for complete backward compatibility with the security model in
use by name spaces and various container managers.

The container manager would be responsible for the setting up a name
space with CLONE_UNCONTAIN and dealing with all the
restrictions/permissions that come with this capability.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 include/uapi/linux/sched.h |  1 +
 kernel/cred.c              | 11 +++++++++++
 2 files changed, 12 insertions(+)

diff --git a/include/uapi/linux/sched.h b/include/uapi/linux/sched.h
--- a/include/uapi/linux/sched.h
+++ b/include/uapi/linux/sched.h
@@ -9,6 +9,7 @@
 #define CLONE_FS	0x00000200	/* set if fs info shared between processes */
 #define CLONE_FILES	0x00000400	/* set if open files shared between processes */
 #define CLONE_SIGHAND	0x00000800	/* set if signal handlers and blocked signals shared */
+#define CLONE_UNCONTAIN	0x00001000	/* set if child PID name space can re-enter parent */
 #define CLONE_PTRACE	0x00002000	/* set if we want to let tracing continue on the child too */
 #define CLONE_VFORK	0x00004000	/* set if the parent wants the child to wake it up on mm_release */
 #define CLONE_PARENT	0x00008000	/* set if we want to have the same parent as the cloner */
diff --git a/kernel/cred.c b/kernel/cred.c
--- a/kernel/cred.c
+++ b/kernel/cred.c
@@ -364,6 +364,17 @@ int copy_creds(struct task_struct *p, unsigned long clone_flags)
 	}
 #endif
 
+	/*
+	 * Unless the child is marked has UNCONTAIN the CAP_ADMIN_NS power
+	 * should be stripped.
+	 */
+	if ((clone_flags & CLONE_NEWPID) &&
+	    !(clone_flags & CLONE_UNCONTAIN) &&
+	    cap_raised(new->cap_effective, CAP_ADMIN_NS)) {
+		cap_lower(new->cap_bset, CAP_ADMIN_NS);
+		cap_lower(new->cap_effective, CAP_ADMIN_NS);
+		cap_lower(new->cap_permitted, CAP_ADMIN_NS);
+	}
 	atomic_inc(&new->user->processes);
 	p->cred = p->real_cred = get_cred(new);
 	alter_cred_subscribers(new, 2);
-- 
1.9.1

