From 650d53020dc064c6e5aaad9be2e234e7b08ed3c0 Mon Sep 17 00:00:00 2001
From: Fupan Li <fupan.li@windriver.com>
Date: Mon, 18 Sep 2017 10:37:08 +0000
Subject: [PATCH] pflask: enable moving wireless network to another netns

Signed-off-by: Fupan Li <fupan.li@windriver.com>
---
 src/netif.c | 125 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 125 insertions(+)

diff --git a/src/netif.c b/src/netif.c
index c8c6fd2..a90ddff 100644
--- a/src/netif.c
+++ b/src/netif.c
@@ -36,6 +36,8 @@
 
 #include <linux/rtnetlink.h>
 #include <linux/veth.h>
+#include <sys/stat.h>
+#include <errno.h>
 
 #include "ut/utlist.h"
 
@@ -213,7 +215,130 @@ static void if_up(int sock, int if_index) {
 		            "Error sending netlink request");
 }
 
+/* If we are asked to move a wireless interface, then we must actually move its
+ * phyN device. Detect that condition and return the physname here. The physname
+ * will be passed to lxc_netdev_move_wlan() which will free it when done.
+ */
+#define PHYSNAME "/sys/class/net/%s/phy80211/name"
+static char *is_wlan(const char *ifname)
+{
+	int i, ret;
+	long physlen;
+	size_t len;
+	char *path;
+	FILE *f;
+	struct stat sb;
+	char *physname = NULL;
+
+	len = strlen(ifname) + strlen(PHYSNAME) - 1;
+	path = alloca(len + 1);
+	ret = snprintf(path, len, PHYSNAME, ifname);
+	if (ret < 0 || (size_t)ret >= len)
+		goto bad;
+
+	ret = stat(path, &sb);
+	if (ret)
+		goto bad;
+
+	f = fopen(path, "r");
+	if (!f)
+		goto bad;
+
+	/* Feh - sb.st_size is always 4096. */
+	fseek(f, 0, SEEK_END);
+	physlen = ftell(f);
+	fseek(f, 0, SEEK_SET);
+
+	physname = malloc(physlen + 1);
+	if (!physname) {
+		fclose(f);
+		goto bad;
+	}
+
+	memset(physname, 0, physlen + 1);
+	ret = fread(physname, 1, physlen, f);
+	fclose(f);
+	if (ret < 0)
+		goto bad;
+
+	for (i = 0; i < physlen; i++) {
+		if (physname[i] == '\n')
+			physname[i] = '\0';
+
+		if (physname[i] == '\0')
+			break;
+	}
+
+	return physname;
+
+bad:
+	free(physname);
+	return NULL;
+}
+
+int wait_for_pid(pid_t pid)
+{
+	int status, ret;
+
+again:
+	ret = waitpid(pid, &status, 0);
+	if (ret == -1) {
+		if (errno == EINTR)
+			goto again;
+		return -1;
+	}
+	if (ret != pid)
+		goto again;
+	if (!WIFEXITED(status) || WEXITSTATUS(status) != 0)
+		return -1;
+	return 0;
+}
+
+static int netdev_move_wlan(char *physname, pid_t pid)
+{
+	char *cmd;
+	pid_t fpid;
+	int err = -1;
+
+	/* Move phyN into the container.  TODO - do this using netlink.
+	 * However, IIUC this involves a bit more complicated work to talk to
+	 * the 80211 module, so for now just call out to iw.
+	 */
+	cmd = on_path("iw", NULL);
+	if (!cmd)
+		goto out1;
+	free(cmd);
+
+	fpid = fork();
+	if (fpid < 0)
+		goto out1;
+
+	if (fpid == 0) {
+		char pidstr[30];
+		sprintf(pidstr, "%d", pid);
+		execlp("iw", "iw", "phy", physname, "set", "netns", pidstr,
+		       (char *)NULL);
+		exit(EXIT_FAILURE);
+	}
+
+	if(wait_for_pid(fpid))
+		goto out1;
+
+	err = 0;
+
+out1:
+	free(physname);
+	return err;
+}
+
 static void move_and_rename_if(int sock, pid_t pid, int if_index, char *new_name) {
+	char *physname;
+	physname = is_wlan(new_name);
+	if (physname){
+		netdev_move_wlan(physname, pid);
+		return;
+	}
+		
 	_free_ struct nlmsg *req = malloc(NLMSG_GOOD_SIZE);
 
 	req->hdr.nlmsg_seq   = 1;
-- 
2.7.4

