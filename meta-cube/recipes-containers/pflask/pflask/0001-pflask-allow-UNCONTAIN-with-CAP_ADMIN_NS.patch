From: Jason Wessel <jason.wessel@windriver.com>
Date: Sat, 12 Oct 2019 08:10:25 -0600
Subject: [PATCH] pflask: allow UNCONTAIN with CAP_ADMIN_NS

The CAP_ADMIN_NS allows a level 1 container to return to the pid_ns of
the root name space.  In order to pass on the CAP_ADMIN_NS capability
bit, the ambient and inheritable CAP_ADMIN_NS bits must be set.

The -C/--uncontain option to pflask allows pflask containers to have
the ability to uncontain themselves. This will become an optional flag
in the future.

Signed-off-by: Jason Wessel <jason.wessel@windriver.com>
---
 src/cmdline.c |   19 ++++++++++++++++++-
 src/cmdline.h |    3 +++
 src/pflask.c  |   29 +++++++++++++++++++++++++++++
 3 files changed, 50 insertions(+), 1 deletion(-)

--- a/src/cmdline.c
+++ b/src/cmdline.c
@@ -57,6 +57,7 @@ const char *gengetopt_args_info_help[] =
   "  -I, --no-ipcns         Disable IPC namespace support  (default=off)",
   "  -H, --no-utsns         Disable UTS namespace support  (default=off)",
   "  -P, --no-pidns         Disable PID namespace support  (default=off)",
+  "  -C, --uncontain        Grant the ability to see the parent namespace",
     0
 };
 
@@ -98,6 +99,7 @@ void clear_given (struct gengetopt_args_
   args_info->cgroup_given = 0 ;
   args_info->caps_given = 0 ;
   args_info->detach_given = 0 ;
+  args_info->uncontain_given = 0 ;
   args_info->attach_given = 0 ;
   args_info->setenv_given = 0 ;
   args_info->keepenv_given = 0 ;
@@ -135,6 +137,7 @@ void clear_args (struct gengetopt_args_i
   args_info->caps_arg = NULL;
   args_info->caps_orig = NULL;
   args_info->detach_flag = 0;
+  args_info->uncontain_flag = 0;
   args_info->attach_orig = NULL;
   args_info->setenv_arg = NULL;
   args_info->setenv_orig = NULL;
@@ -188,6 +191,7 @@ void init_args_info(struct gengetopt_arg
   args_info->no_ipcns_help = gengetopt_args_info_help[20] ;
   args_info->no_utsns_help = gengetopt_args_info_help[21] ;
   args_info->no_pidns_help = gengetopt_args_info_help[22] ;
+  args_info->uncontain_help = gengetopt_args_info_help[23] ;
   
 }
 
@@ -394,6 +398,8 @@ cmdline_parser_dump(FILE *outfile, struc
   write_multiple_into_file(outfile, args_info->caps_given, "caps", args_info->caps_orig, 0);
   if (args_info->detach_given)
     write_into_file(outfile, "detach", 0, 0 );
+  if (args_info->uncontain_given)
+    write_into_file(outfile, "uncontain", 0, 0 );
   if (args_info->attach_given)
     write_into_file(outfile, "attach", args_info->attach_orig, 0);
   write_multiple_into_file(outfile, args_info->setenv_given, "setenv", args_info->setenv_orig, 0);
@@ -1012,10 +1018,11 @@ cmdline_parser_internal (
         { "no-ipcns",	0, NULL, 'I' },
         { "no-utsns",	0, NULL, 'H' },
         { "no-pidns",	0, NULL, 'P' },
+        { "uncontain",	0, NULL, 'C' },
         { 0,  0, 0, 0 }
       };
 
-      c = getopt_long (argc, argv, "hVr:c:t:m:n::u:e:wg:b:da:s:kUMNIHP", long_options, &option_index);
+      c = getopt_long (argc, argv, "hVr:Cc:t:m:n::u:e:wg:b:da:s:kUMNIHP", long_options, &option_index);
 
       if (c == -1) break;	/* Exit from `while (1)' loop.  */
 
@@ -1156,6 +1163,16 @@ cmdline_parser_internal (
             goto failure;
         
           break;
+        case 'C':	/* grant uncontain privs */
+
+
+          if (update_arg((void *)&(args_info->uncontain_flag), 0, &(args_info->uncontain_given),
+                         &(local_args_info.uncontain_given), optarg, 0, 0, ARG_FLAG,
+                         check_ambiguity, override, 1, 0, "uncontain", 'C',
+                         additional_error))
+            goto failure;
+
+          break;
         case 'a':	/* Attach to the specified detached process.  */
         
         
--- a/src/cmdline.h
+++ b/src/cmdline.h
@@ -83,6 +83,8 @@ struct gengetopt_args_info
   const char *caps_help; /**< @brief Change the effective capabilities inside the container help description.  */
   int detach_flag;	/**< @brief Detach from terminal (default=off).  */
   const char *detach_help; /**< @brief Detach from terminal help description.  */
+  int uncontain_flag;	/**< @brief Grant uncontain privs (default=off).  */
+  const char *uncontain_help; /**< @brief uncontain privs help description.  */
   int attach_arg;	/**< @brief Attach to the specified detached process.  */
   char * attach_orig;	/**< @brief Attach to the specified detached process original value given at command line.  */
   const char *attach_help; /**< @brief Attach to the specified detached process help description.  */
@@ -120,6 +122,7 @@ struct gengetopt_args_info
   unsigned int cgroup_given ;	/**< @brief Whether cgroup was given.  */
   unsigned int caps_given ;	/**< @brief Whether caps was given.  */
   unsigned int detach_given ;	/**< @brief Whether detach was given.  */
+  unsigned int uncontain_given ;	/**< @brief Whether uncontain was given.  */
   unsigned int attach_given ;	/**< @brief Whether attach was given.  */
   unsigned int setenv_given ;	/**< @brief Whether setenv was given.  */
   unsigned int keepenv_given ;	/**< @brief Whether keepenv was given.  */
--- a/src/pflask.c
+++ b/src/pflask.c
@@ -46,6 +46,7 @@
 
 #include "cmdline.h"
 
+#include <sys/capability.h>
 #include "capabilities.h"
 #include "pty.h"
 #include "user.h"
@@ -58,6 +59,24 @@
 #include "printf.h"
 #include "util.h"
 
+/* From kernel and libcap definitions */
+#define NUMBER_OF_CAP_SETS 3
+#define _LIBCAP_CAPABILITY_U32S 2
+struct _cap_struct {
+    struct __user_cap_header_struct head;
+    union {
+        struct __user_cap_data_struct set;
+        __u32 flat[NUMBER_OF_CAP_SETS];
+    } u[_LIBCAP_CAPABILITY_U32S];
+    uid_t rootid;
+};
+
+#define raise_cap(x,set)   u[(x)>>5].flat[set]       |=  (1<<((x)&31))
+
+#ifndef CAP_ADMIN_NS
+#  define CAP_ADMIN_NS	38
+#endif
+
 static size_t validate_optlist(const char *name, const char *opts);
 
 static void do_daemonize(void);
@@ -179,6 +198,16 @@ int main(int argc, char *argv[]) {
 	if (args.no_pidns_flag)
 		clone_flags &= ~(CLONE_NEWPID);
 
+	if (args.uncontain_flag) {
+		struct _cap_struct *cap_fix = cap_get_proc();
+		fail_if( !cap_fix, "Could not read capabilities");
+		cap_fix->raise_cap(CAP_ADMIN_NS, CAP_INHERITABLE);
+		cap_set_proc(cap_fix);
+		fail_if(prctl(PR_CAP_AMBIENT, PR_CAP_AMBIENT_RAISE, CAP_ADMIN_NS, 0, 0) != 0,
+			"CAP_ADMIN_NS raise failed");
+                cap_free(cap_fix);
+	}
+
 	if (args.attach_given) {
 		master_fd = recv_pty(args.attach_arg);
 		fail_if(master_fd < 0, "Invalid PID '%u'", args.attach_arg);
